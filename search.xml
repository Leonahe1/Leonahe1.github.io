<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IO总复习</title>
      <link href="/2023/02/11/IO%E6%80%BB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/02/11/IO%E6%80%BB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h1><h2 id="标准IO与文件IO区别？"><a href="#标准IO与文件IO区别？" class="headerlink" title="标准IO与文件IO区别？"></a>标准IO与文件IO区别？</h2><p>​程序和外界交互需要输入和输出，分为标准IO和文件IO,实质就是如何操作文件。其中标准IO属于标准库调用，文件IO属于系统调用。</p><h3 id="标准io"><a href="#标准io" class="headerlink" title="标准io"></a>标准io</h3><ul><li>标准IO主要是通过使用文件流指针调用fopen\fclose等库函数操作文件。</li><li>标准IO属于标准库调用(标准函数库)。</li><li>库调用：本质上库是一种可执行代码的二进制形式，可以被操作系统载入系统执行(标准IO)</li><li>流与文件指针：当用标准IO打开文件时，会创建一个FILE结构体来描述所打开的文件，用户通过FILE结构体类型的指针来操作所打开的文件。流用FILE*指针来描述。</li></ul><h3 id="文件io"><a href="#文件io" class="headerlink" title="文件io"></a>文件io</h3><ul><li><p>文件I0主要是通过使用文件描述符调用open\close等系统调用函数操作文件。</p></li><li><p>文件I0属于系统调用(由操作系统给应用程序提供的接口)。</p></li><li><p>系统调用：操作系统负责管理和分配计算机资源，为了方便服务于应用程序，操作系统提供了一组特殊接口即系统调用，用户通过接口可一使用内核提供的各种功能（文件IO）。</p></li><li><p>文件描述符：操作文件入口标识，内核用以标识一个特定进程正在访问的文件；顺序分配非负整数，分配规则最小未用原则（无缓存）。</p><p><strong>为啥是数字：</strong>Linux系统分为用户和内核，内核执行权限比用户层要高，内核负责管理对硬件的有序操作，用户多个进程需要通过内核写入文件，由于内核负责管理对硬件的操作，且硬盘只有一个情况下，内核需要将用户IO请求整理成队列，然后通过驱动写入硬盘；内核使用的内存和用户使用的内存不通用，就意味着不能将内核地址返回给用户，由于进程需要记录所打开的文件信息，描述一个打开的文件，内核使用很多复杂结构体，内核使用的内存不能将指针返回给用户；所以由进程保留一个对应关系表，由数字对应内核使用的结构体，然后将数字返回给用户层，这个数字就是文件描述符数字操作与其它类型比较更方便。</p></li></ul><h2 id="静态库与动态库的区别？"><a href="#静态库与动态库的区别？" class="headerlink" title="静态库与动态库的区别？"></a>静态库与动态库的区别？</h2><p>本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。由于windows和linux版本不同，因此二者库的二进制是不兼容的。</p><ul><li>静态库：静态库在程序编译时会被连接到目标代码中，程序运行时将不再需要该静态库，因此代码体积较大。</li><li>动态库：动态库是在程序运行时载入，因此在程序运行时还需要动态库存在，因此代码体积小。</li><li>创建过程<ul><li>静态库：a  lib 库前缀<br>制作 ar crs libmyhello.a hello.o<br>链接 gcc -o hello main.c -L. -lmyhello<br>-L. 当前路径<br>-l 需要链接一个库<br>在链接成可执行文件时，将静态库文件打包到可执行程序中<br>运行时，静态库文件同可执行文件一同加载</li><li>动态库：.so<br>制作.o文件 gcc -fPIC -Wall -c hello.c<br>制作.so文件 gcc -shared -o libmyhello.so hello.o<br>链接<br>如何找到动态库<br>    1 拷贝到系统库路径下<br>    2 修改环境变量LD_LIBRARY_PATH<br>    3 修改ld.so.conf 配置文件</li></ul></li></ul><h1 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h1><h2 id="①文件复制"><a href="#①文件复制" class="headerlink" title="①文件复制"></a>①文件复制</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//文件复制</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//open source file</span><span class="token keyword">int</span> iSrc <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"3.txt"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> iSrc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open source file ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//open dest file</span><span class="token keyword">int</span> iDest <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"4.txt"</span><span class="token punctuation">,</span>O_CREAT <span class="token operator">|</span> O_WRONLY <span class="token operator">|</span> O_TRUNC<span class="token punctuation">,</span><span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> iDest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">close</span><span class="token punctuation">(</span>iSrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open dest file ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//read and write</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> iRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iRet <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>iSrc<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>iDest<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>iRet<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//close</span><span class="token function">close</span><span class="token punctuation">(</span>iSrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>iDest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//命令行传参复制文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//open src dest</span><span class="token comment">//FILE *pSrc = fopen("1.txt","r");</span>FILE <span class="token operator">*</span>pSrc <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pSrc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//FILE *pDest = fopen("2.txt","w");</span>FILE <span class="token operator">*</span>pDest <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pDest <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pSrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fopen ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// read write</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> iRet <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>pSrc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iRet <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>pSrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> iRet <span class="token operator">||</span> <span class="token function">ferror</span><span class="token punctuation">(</span>pSrc<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>iRet<span class="token punctuation">,</span>pDest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//close src dest</span><span class="token function">fclose</span><span class="token punctuation">(</span>pSrc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pDest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="②-图片解析-上半部分正常显示，下半部分异常"><a href="#②-图片解析-上半部分正常显示，下半部分异常" class="headerlink" title="②. 图片解析(上半部分正常显示，下半部分异常)"></a>②. 图片解析(上半部分正常显示，下半部分异常)</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> imageFd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">,</span><span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 打开原图片</span><span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"target.png"</span><span class="token punctuation">,</span>O_WRONLY <span class="token operator">|</span> O_TRUNC<span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span><span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开目标文件(转换后的文件)，有则删除无则创建 </span><span class="token keyword">if</span><span class="token punctuation">(</span>imageFd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> target <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 判断 </span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open ok\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>imageFd<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 偏移到文件末，返回值为偏移量大小，即文件大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"move %d size\n"</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>imageFd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先关闭一下原图片，因为已经偏移到文件末了，需要让偏移量指向文件开头</span>imageFd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">,</span><span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 循环 读取 写入，终止条件为文件大小</span><span class="token punctuation">&#123;</span>    <span class="token function">read</span><span class="token punctuation">(</span>imageFd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 如果读了一半，则修改数据，让异常显示</span>   buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token function">write</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="③-fopen-fread-fwrite"><a href="#③-fopen-fread-fwrite" class="headerlink" title="③. fopen fread fwrite"></a>③. fopen fread fwrite</h2><h3 id="3-1-fopen"><a href="#3-1-fopen" class="headerlink" title="3.1 fopen"></a>3.1 fopen</h3><ul><li><code>fopen()</code> 函数：打开文件</li><li><strong>包含头文件：</strong><code>#include &lt;stdio.h&gt;</code></li><li><strong>格式：</strong><code>FILE * fopen(const char  *path, const char  *mode)</code></li><li><strong>参数：</strong><ol><li>path 需要打开的文件路径</li><li>mode 文件打开方式</li></ol></li><li><strong>mode function</strong><ol><li>r 以只读方式打开文件，该文件必须存在</li><li>r+ 以可读写方式打开文件，该文件必须存在</li><li>rb+ 读写打开一个二进制文件，允许读数据</li><li>rt+ 读写打开一个文本文件，允许读和写</li><li>w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件</li><li>w+ 打开可读写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件</li><li>a 以附加方式打开只写文件，若文件不存在，则会建立该文件，若文件存在，写入的数据会被附加到文件尾，即文件原先内容会被保留</li><li>a+ 以附加方式打开可读写文件，若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留</li><li>wb 只写打开或新建一个二进制文件，只允许写数据</li><li>wb+ 读写打开或新建一个二进制文件，允许读和写</li><li>wt+ 读写打开或建立一个文本文件，允许读和写</li><li>at+ 读写打开一个文本文件，允许读或在文本末追加数据</li><li>ab+ 读写打开一个二进制文件，允许读或者在文件末追加数据</li></ol></li></ul><h3 id="3-2-fread-amp-fwrite"><a href="#3-2-fread-amp-fwrite" class="headerlink" title="3.2 fread &amp; fwrite"></a>3.2 fread &amp; fwrite</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 读取文件块数据</span><span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> FILE <span class="token operator">*</span>file<span class="token punctuation">)</span>    <span class="token comment">// 写入文件块数据</span> <span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> FILE <span class="token operator">*</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>参数说明：</strong></p><ul><li>fread参数说明<ol><li>buffer是读取数据后存放地址</li><li>size是块长度</li><li>count是块数量，实际长度为 <strong>size*count</strong></li><li>返回值为块成功读取块的count数量</li></ol></li><li>fwrite参数说明<ol><li>buffer是写入数据后存放地址</li><li>size是块的长度</li><li>count是块的数量，实际长度为 <strong>size*count</strong></li><li>返回值为块成功写入块的count数量</li></ol></li></ul><h3 id="3-3-代码"><a href="#3-3-代码" class="headerlink" title="3.3 代码"></a>3.3 代码</h3><h4 id="3-3-1-读操作"><a href="#3-3-1-读操作" class="headerlink" title="3.3.1 读操作"></a>3.3.1 读操作</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token comment">/* 打开文件 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"打开文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开文件成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 读取数据 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">></span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span> <span class="token comment">// 使用ferror判断是否发生错误</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fread 错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果未发生错误则意味着已经到达了文件末尾</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成功读取%d 个字节数据: %s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="3-3-1-写操作"><a href="#3-3-1-写操作" class="headerlink" title="3.3.1 写操作"></a>3.3.1 写操作</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token comment">/* 打开文件 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"打开文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开文件成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 写入数据 */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fread 错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"写入数据成功\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-4-open-read-write"><a href="#3-4-open-read-write" class="headerlink" title="3.4. open read write"></a>3.4. open read write</h3><h4 id="3-4-1-open"><a href="#3-4-1-open" class="headerlink" title="3.4.1 open"></a>3.4.1 open</h4><ul><li><p><strong>功能描述：</strong></p><p><em>用于打开或创建文件，在打开或创建文件时可以指定文件的属性及用户的权限等各种参数</em></p></li><li><p><strong>所需头文件：</strong></p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><strong>函数原型：</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><p><strong>参数：</strong></p><ol><li><p>pathname 被打开的文件名（可包含路径）</p></li><li><p>flags 文件打开方式</p><ul><li>O_RDONLY以只读方式打开文件</li><li>O_WRONLY    以只写方式打开文件</li><li>O_RDWR:        以读写方式打开文件</li><li>O_CREAT:        如果文件不存在，就创建一个新文件，并用第三个参数为其设置权限</li><li>O_EXCL:           如果使用O_CREAT时文件存在，则返回错误消息，这一参数可测试文件是否存在。此时open是原子操作，防止多个进程同时创建同一个文件<br>O_NOCTTY:使用本参数时，若文件为终端，那么该终端不会成为调用open()的那个进程的控制终端<br> O_TRUNC:若文件已经存在，那么会删除文件中的全部原有数据，并且设置文件大小为0<br> O_APPEND:以添加方式打开文件，在打开文件的同时，文件指针指向文件的末尾，即将写入的数据添加到文件的末尾</li><li>O_NONBLOCK: 如果pathname指的是一个FIFO、一个块特殊文件或一个字符特殊文件，则此选择项为此文件的本次打开操作和后续的I&#x2F;O操作设置非阻塞方式。<br>O_SYNC:使每次write都等到物理I&#x2F;O操作完成。<br> O_RSYNC:read 等待所有写入同一区域的写操作完成后再进行</li></ul><p><strong>在open()函数中，falgs参数可以通过“|”组合构成，但前3个标准常量（O_RDONLY，O_WRONLY，和 O_RDWR）不能互相组合。</strong></p></li><li><p>mode: 被创建文件的权限， 使用O_CREAT 这个参数时，必须给定mode。 man手册里提供了一系列参数，但一般都是直接给数字，例如“0777”表示，文件所有者、同组人员、其他人都有可读可写可执行该文件的权限。但是这样的参数创建的文件，最后显示的权限可能不是rwxrwxrwx，因为还有个东西叫umask，终端输入</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">umask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>可以看到一串数字，这个数字的作用类似于子网掩码，我们在函数中写的参数：“<strong>0777</strong>”还要经过运算：(mode &amp; ~umask)，才是最终创建文件的权限。</p></li></ol></li><li><p><strong>返回值：</strong></p><p>成功：返回文件描述符</p><p>失败：返回-1</p></li></ul><h4 id="4-2-close"><a href="#4-2-close" class="headerlink" title="4.2 close"></a>4.2 close</h4><p><strong>功能描述：</strong>用于关闭一个被打开的的文件</p><p><strong>所需头文件：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>函数原型：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><p><strong>参数：</strong></p><ol><li>fd： 将要读取数据的文件描述词</li><li>buf：指缓冲区，即读取的数据会被放到这个缓冲区中去</li><li>buf：指缓冲区，即读取的数据会被放到这个缓冲区中去</li></ol></li><li><p><strong>返回值：</strong></p><p>返回所读取的字节数；0（读到EOF）；-1（出错）。</p></li></ul><h4 id="3-4-3-read"><a href="#3-4-3-read" class="headerlink" title="3.4.3 read"></a><strong>3.4.3 read</strong></h4><ul><li><strong>功能描述：</strong> 从文件读取数据。</li><li><strong>所需头文件：</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><strong>函数原型：</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><p><strong>参数：</strong></p><ol><li>fd： 将要读取数据的文件描述词</li><li>buf：指缓冲区，即读取的数据会被放到这个缓冲区中去</li><li>count： 表示调用一次read操作，应该读多少数量的字符</li></ol></li><li><p><strong>返回值：</strong></p><p>返回所读取的字节数；0（读到EOF）；-1（出错）</p></li></ul><h4 id="3-4-4-write"><a href="#3-4-4-write" class="headerlink" title="3.4.4 write"></a>3.4.4 write</h4><p><strong>功能描述：</strong> 向文件写入数据。<br><strong>所需头文件：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>函数原型：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>返回值：</strong></p><p>写入文件的字节数（成功）；-1（出错）</p><h4 id="3-4-5-lseek"><a href="#3-4-5-lseek" class="headerlink" title="3.4.5 lseek"></a>3.4.5 lseek</h4><p><strong>功能描述：</strong> 用于在指定的文件描述符中将将文件指针定位到相应位置。<br><strong>所需头文件：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><strong>函数原型：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">off_t</span> <span class="token function">lseek</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>参数：</strong></p><ol><li>fd;文件描述符</li><li>offset:偏移量，每一个读写操作所需要移动的距离，单位是字节，可正可负（向前移，向后移）<ul><li>SEEK_SET:当前位置为文件的开头，新位置为偏移量的大小</li><li>SEEK_CUR:当前位置为指针的位置，新位置为当前位置加上偏移量</li><li>SEEK_END:当前位置为文件的结尾，新位置为文件大小加上偏移量的大小</li></ul></li></ol><p><strong>返回值：</strong></p><p>成功：返回当前位移</p><p>失败：返回-1</p><h4 id="3-4-6-代码"><a href="#3-4-6-代码" class="headerlink" title="3.4.6 代码"></a>3.4.6 代码</h4><h5 id="3-4-6-1-read"><a href="#3-4-6-1-read" class="headerlink" title="3.4.6.1 read"></a>3.4.6.1 read</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> read_fd<span class="token punctuation">,</span> size<span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\0"</span><span class="token punctuation">;</span>    read_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">,</span>S_IRUSR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> read_fd<span class="token punctuation">)</span> <span class="token comment">// 打开文件失败,则异常返回</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    size <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>read_fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read_size %d:%s\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>read_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="3-4-6-1-write"><a href="#3-4-6-1-write" class="headerlink" title="3.4.6.1 write"></a>3.4.6.1 write</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathName <span class="token operator">=</span> <span class="token string">"out.txt"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> in<span class="token punctuation">,</span> out<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"\0"</span><span class="token punctuation">;</span>    in <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">,</span>S_IRUSR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> in<span class="token punctuation">)</span> <span class="token comment">// 打开文件失败,则异常返回</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    out <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>pathName<span class="token punctuation">,</span> O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> out<span class="token punctuation">)</span> <span class="token comment">// 创建文件失败,则异常返回</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size:%d %s\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="④-ls-l-实现"><a href="#④-ls-l-实现" class="headerlink" title="④ ls -l 实现"></a>④ ls -l 实现</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;strings.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pwd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;grp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not enter dir\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DIR <span class="token operator">*</span>pDir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pDir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open dir err\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>pDirent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">stat</span> pStat<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">passwd</span> <span class="token operator">*</span>uid<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">group</span> <span class="token operator">*</span>gid<span class="token punctuation">;</span><span class="token keyword">char</span> filePath<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> pro<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> time<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> iRet<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>pDirent <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>pDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">strcat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span>pDirent<span class="token operator">-></span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("%s\n",pDirent->d_name);</span>iRet <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token operator">&amp;</span>pStat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>iRet <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISLNK</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'l'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'d'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISFIFO</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'p'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">S_ISSOCK</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pro<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IRUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'r'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>pro<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'w'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>pro<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXUSR<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'x'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    <span class="token comment">// 所属组</span>    pro<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IRGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'r'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    pro<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'w'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    pro<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXGRP<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'x'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    <span class="token comment">// 其他</span>    pro<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IROTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'r'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    pro<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IWOTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'w'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span>    pro<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> S_IXOTH<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'x'</span> <span class="token operator">:</span> <span class="token char">'-'</span><span class="token punctuation">;</span><span class="token comment">// -rw-rw-r-- 1 vision vision  983 10月 18 19:56 homework.c</span><span class="token comment">// st_mode  st_nlink st_uid st_gid st_size st_mtime pDirent->d_name</span>uid <span class="token operator">=</span> <span class="token function">getpwuid</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>gid <span class="token operator">=</span> <span class="token function">getgrgid</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strftime</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%m月 %d %R"</span><span class="token punctuation">,</span><span class="token function">gmtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>pStat<span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %4d %7s %7s %5ld %4s %s\n"</span><span class="token punctuation">,</span>pro<span class="token punctuation">,</span>pStat<span class="token punctuation">.</span>st_nlink<span class="token punctuation">,</span>uid<span class="token operator">-></span>pw_name<span class="token punctuation">,</span>gid<span class="token operator">-></span>gr_name<span class="token punctuation">,</span>pStat<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span>time<span class="token punctuation">,</span>pDirent<span class="token operator">-></span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pStat<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stat</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程总复习</title>
      <link href="/2023/02/11/%E8%BF%9B%E7%A8%8B%E6%80%BB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/02/11/%E8%BF%9B%E7%A8%8B%E6%80%BB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="1、进程、线程、程序相关概念"><a href="#1、进程、线程、程序相关概念" class="headerlink" title="1、进程、线程、程序相关概念"></a>1、进程、线程、程序相关概念</h1><h2 id="1-1程序与进程的区别"><a href="#1-1程序与进程的区别" class="headerlink" title="1.1程序与进程的区别"></a>1.1程序与进程的区别</h2><p>程序是数据和指令的集合，是一个静态的概念，比如Windows的QQ；Linux的&#x2F;bin&#x2F;ls、&#x2F;bin&#x2F;cp等二进制可执行文件。</p><p>进程是一个程序的运行过程，是一个动态概念，进程是存在生命周期概念的，会随着一个程序的终止而消失，不会长期在系统中存在。</p><ul><li>区别<ul><li>进程是程序的一次执行过程，由程序、数据和进程控制块（PCB）三部分组成，是动态概念，程序是一组有序的指令集和，是静态概念。</li><li>进程是暂时的，是程序在数据集上的一次执行，可创建可撤销，程序是永存的。</li><li>进程具有并发性，程序没有。</li><li>进程是资源(内存资源)管理的最小单位，程序不是。</li><li>进程与程序不是一一对应，多个进程可执行一个程序，一个程序可执行多个程序。</li></ul></li><li>联系<ul><li>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</li></ul></li></ul><h2 id="1-2进程与线程的区别"><a href="#1-2进程与线程的区别" class="headerlink" title="1.2进程与线程的区别"></a>1.2进程与线程的区别</h2><p>线程是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</p><ul><li>概念<ul><li>进程是程序为了完成任务执行的一次过程，是一个动态的。进程包括两个集合。一个资源的集合，一个线程的集合。</li><li>线程是进程的进一步抽象。线程本质是运行一个线程函数，线程是轻量级进程，每个进程中必然包括一个线程，被称为主线程。</li></ul></li><li>调度<ul><li>进程是资源分配的最小单位。线程是系统调度的最小单位。</li></ul></li><li>安全性<ul><li>进程在启动初期会申请一个0-4G的虚拟空间。3-4G是内核空间，多进程之间共享，用于进程间通信。0-3G是用户空间，每个进程都有独立的用户空间，互不影响，所以安全性更高。</li><li>同一个进程内的线程共享进程的资源，其中一个线程崩溃可能会对其他线程造成影响，多线程安全性差。线程中应避免对共用的资源操作，以免进程崩溃。</li></ul></li><li>创建<ul><li>创建进程使用fork函数。进程个数没有限制。</li><li>线程不属于标准c库函数也不属于系统调用，而是属于第三方库libpthread.so。创建线程使用pthread_creat函数。线程个数是有限。</li></ul></li><li>通信<ul><li>进程间通信方式有：无名管道，有名管道，信号，消息队列，共享内存，信号灯集，socket套接字通信。</li><li>线程间通信方式有两种，全局变量和参数arg。多线程间通信简单，但是需要对临界资源进行互斥与同步操作。</li></ul></li><li>资源<ul><li>进程会申请一个PCB进程控制块，它是一个结构体（task_struct），里面存储了进程所有的资源。如：PC程序计数器、堆栈、文件描述符、进程的状态 、进程号等等。</li><li>线程也属于并发，也会拥有自己的资源，但线程本身并不会去申请资源 ，而是共享进程的资源。</li></ul></li><li>运行速度<ul><li>进程较大，速度相对较慢。</li><li>线程速度快。</li></ul></li><li>调度机制<ul><li>进程是时间片轮询，上下文切换。进程之间存在着一种竞态。执行速度是不一定的，所以父子进程结束的快慢也是不一定。</li><li>线程间的同步机制：无名信号量；互斥机制：互斥锁（与条件变量配合使用）。</li></ul></li></ul><h3 id="进程与线程持有资源的区别"><a href="#进程与线程持有资源的区别" class="headerlink" title="进程与线程持有资源的区别"></a>进程与线程持有资源的区别</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AE%B9%E5%8C%BA%E5%88%AB.png"></p><h2 id="1-3进程的状态转换"><a href="#1-3进程的状态转换" class="headerlink" title="1.3进程的状态转换"></a>1.3进程的状态转换</h2><h4 id="进程的三态模型"><a href="#进程的三态模型" class="headerlink" title="进程的三态模型"></a>进程的三态模型</h4><p>按进程在执行过程中的不同情况至少要定义三种状态。</p><ul><li><p>运行（running）态：进程占有处理器正在运行的状态。</p><blockquote><p>进程已获得CPU，其程序正在执行。在单处理机系统中，只有一个进程处于执行状态； 在多处理机系统中，则有多个进程处于执行状态。</p></blockquote></li><li><p>就绪（ready）态：进程具备运行条件，等待系统分配处理器以便运行的状态。</p><blockquote><p>当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU，便可立即执行，进程这时的状态称为就绪状态。在一个系统中处于就绪状态的进程可能有多个，通常将它们排成一个队列，称为就绪队列。</p></blockquote></li><li><p>等待（wait）态：又称阻塞态或睡眠态，指进程不具备运行条件，正在等待某个时间完成的状态。</p><blockquote><p>也称为等待或睡眠状态，一个进程正在等待某一事件发生（例如请求I&#x2F;O而等待I&#x2F;O完成等）而暂时停止运行，这时即使把处理机分配给进程也无法运行，故称该进程处于阻塞状态。</p></blockquote></li></ul><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%B8%89%E6%80%81%E6%A8%A1%E5%9E%8B.png"></p><ul><li><p>引起进程状态转换的具体原因如下：</p><p>运行态→等待态：等待使用资源；如等待外设传输；等待人工干预。</p><p>等待态→就绪态：资源得到满足；如外设传输结束；人工干预完成。</p><p>运行态→就绪态：运行时间片到；出现有更高优先权进程。</p><p>就绪态→运行态：CPU 空闲时选择一个就绪进程。</p></li></ul><h4 id="进程的五态模型"><a href="#进程的五态模型" class="headerlink" title="进程的五态模型"></a>进程的五态模型</h4><p>五态模型在三态模型的基础上增加了新建态（new）和终止态（exit）。</p><ul><li><p>新建态：对应于进程被创建时的状态，尚未进入就绪队列。</p><blockquote><p>创建一个进程需要通过两个步骤：</p><p>1.为新进程分配所需要资源和建立必要的管理信息。</p><p>2.设置该进程为就绪态，并等待被调度执行。</p></blockquote></li><li><p>终止态：指进程完成任务到达正常结束点，或出现无法克服的错误而异常终止，或被操作系统及有终止权的进程所终止时所处的状态。</p><blockquote><p>处于终止态的进程不再被调度执行，下一步将被系统撤销，最终从系统中消失。</p><p>终止一个进程需要两个步骤：</p><p>1.先等待操作系统或相关的进程进行善后处理（如抽取信息）。</p><p>2.然后回收占用的资源并被系统删除。</p></blockquote></li></ul><p><img src="/images/%E8%BF%9B%E7%A8%8B%E4%BA%94%E6%80%81%E6%A8%A1%E5%9E%8B.png"></p><ul><li><p>引起进程状态转换的具体原因如下：</p><p>NULL→新建态：执行一个程序，创建一个子进程。</p><p>新建态→就绪态：当操作系统完成了进程创建的必要操作，并且当前系统的性能和虚拟内存的容量均允许。</p><p>运行态→终止态：当一个进程到达了自然结束点，或是出现了无法克服的错误，或是被操作系统所终结，或是被其他有终止权的进程所终结。</p><p>运行态→就绪态：运行时间片到；出现有更高优先权进程。</p><p>运行态→等待态：等待使用资源；如等待外设传输；等待人工干预。</p><p>就绪态→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。</p><p>等待态→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。</p><p>终止态→NULL：完成善后操作。</p></li></ul><h2 id="1-4进程的组成"><a href="#1-4进程的组成" class="headerlink" title="1.4进程的组成"></a>1.4进程的组成</h2><p>进程的组成主要包括三大部分：PCB、程序段与数据段。</p><ul><li>程序段就是当前正在执行的程序代码。</li><li>数据段则是在运行时动态产生的数据，比如全局变量等。</li><li>进程是操作系统用于实现多道程序并发执行而产生的，操作系统为了管理和控制进程的运行，需要记录一些信息，这些用于存放进程的管理和控制信息的数据结构就是 PCB（Process Control Block）。</li></ul><p>从 PCB 的定义可以看出，它实际上是一种数据结构，而存放的是一些管理信息。主要包括如下信息：</p><ul><li>进程描述信息：PID 即唯一标识进程的整形数据，每个进程对应一个 PID；UID 表示进程对应的用户ID。在 Linux 环境下，使用 ps -ef 命令，第一列展示的就是 UID，第二列则是 PID，第三列是 PPID，即父进程的 PID。</li><li>进程控制信息：进程的状态，包括运行、就绪、阻塞等，表示进程当前的运行情况；进程的优化级等。</li><li>资源需求相关：资源分配、控制信息等。</li><li>其他信息：与处理机相关，各种寄存器，如程序计数器、指令寄存器等，涉及CPU上下文切换，文件描述符记录打开文件信息等。</li></ul><h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><p><img src="/images/%E8%BF%9B%E7%A8%8B%E7%BB%84%E6%88%90.png"></p><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><ul><li>动态性：进程的最基本的特征，进程是程序的一次执行过程，是动态的产生、变化和消亡。</li><li>并发性：内存中有多个进程实体，各进程可并发执行。</li><li>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位。</li><li>异步性：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。</li><li>结构性：每个进程都会配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。</li></ul><h1 id="2、僵尸进程和孤儿进程"><a href="#2、僵尸进程和孤儿进程" class="headerlink" title="2、僵尸进程和孤儿进程"></a>2、僵尸进程和孤儿进程</h1><p><strong>讲师进程</strong></p><p>当子进程先于父进程结束，而父进程没有回收子进程的资源，此时，子进程就无法释放所有的进程资源，<br>此时的子进程的状态就变成了僵尸态，称这种进程：僵尸进程</p><p>底层原因：一个进程在退出的时候，会关闭所有的文件描述符，释放在用户空间中分配的内存，但是该进程的PCB仍会暂时保留，因为里面还存放着进程的退出状态以及统计信息等，这些PCB的信息均需该进程的父进程接收。</p><p>危害：大量的僵尸进程驻留在内存里会耗费内存资源<br>防止僵尸进程的产生，父进程需要调用wait函数，等待子进程的状态改变（运行-死亡）</p><p>wait函数是一个阻塞函数，该函数将会一直等待，直到子进程的状态改变，该函数才运行，回收子进程的资源</p><p><strong>孤儿进程</strong><br>当父进程先于子进程结束，此时子进程就变成了孤儿进程<br>因此init祖先进程会对孤儿进程领养。孤儿进程的父进程就会变成pid为1的祖先进程，孤儿进程并不会有什么危害。</p><p><strong>验证僵尸进程</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token comment">//通过sleep函数先让父进程等待，再子进程结束，出现僵尸进程</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child process is tobe done %d %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//wait(&amp;status);//等待子进程结束，回收子进程资源，避免僵尸进程</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="3、exec函数族"><a href="#3、exec函数族" class="headerlink" title="3、exec函数族 **"></a>3、exec函数族 **</h1><p>exec函数族</p><table><thead><tr><th align="center">所需头文件</th><th>#include &lt;unistd.h&gt;</th></tr></thead><tbody><tr><td align="center">函数原型</td><td>int execl(const *path,const char *arg,…);</td></tr><tr><td align="center"></td><td>int execv(const char *path,char *const argv[]);</td></tr><tr><td align="center"></td><td>int execle(const char *path,const char *arg, … ,char *const envp[]);</td></tr><tr><td align="center"></td><td>int execve(const char *path,char *const argv[],cahr *const envp[]);</td></tr><tr><td align="center"></td><td>int execlp(const char *file,const char *arg, …);</td></tr><tr><td align="center"></td><td>int execvp(const char*file,char *const argv[]);</td></tr><tr><td align="center">函数返回值</td><td>-1 : 出错</td></tr></tbody></table><p>① fork函数用于创建一个子进程，该子进程几乎拷贝了父进程的全部内容。</p><p>② exer函数族提供了一种在进程中启动另一个程序执行的方法。它可以根据指定的文件名或目录名找到可执行文件，并用它来取代原调用进程的数据段、代码段和堆栈段。在执行完之后，原调用进程的内容除了进程号外，其他全部都被替换了。</p><p>③ 可执行文件既可以是二进制文件，也可以是任何Linux下可执行的脚本文件。</p><p>④ 当进程认为自己不能再为系统和用户做出任何贡献了时就可以调用exec函数，让自己执行新的程序。</p><p>⑤ 如果某个进程想同时执行另一个程序，它就可以调用fork函数创建子进程，然后在子进程中调用任何一个exec函数。这样看起来就好像通过执行应用程序而产生了一个新进程一样。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys&#x2F;types.h&gt;&#x2F;&#x2F;使用fork+execl函数，模拟bash创建进程执行ls的过程int main()&#123;pid_t pid;printf(&quot;this is bash ####### %d\n&quot;,getpid());&#x2F;&#x2F;获取进程号pid &#x3D; fork();     &#x2F;&#x2F;fork进程if(0 &#x3D;&#x3D; pid)&#123;printf(&quot;new process %d %d\n&quot;,getpid(),getppid());&#x2F;&#x2F;打印新的进程号，打印父进程号execl(&quot;&#x2F;bin&#x2F;ls&quot;,&quot;ls&quot;,&quot;-l&quot;,NULL);&#x2F;&#x2F;execl函数执行ls-l命令printf(&quot;*********\n&quot;);&#125;else&#123;sleep(5);&#x2F;&#x2F;保证子进程先执行printf(&quot;this is bash %d\n&quot;,getpid());   &#x2F;&#x2F;打fork后的进程号&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="4、wait与waitpid的区别？"><a href="#4、wait与waitpid的区别？" class="headerlink" title="4、wait与waitpid的区别？ *"></a>4、wait与waitpid的区别？ *</h1><p><strong>1.为啥使用这函数？</strong></p><p>​进程在运行过程中，会产生僵尸进程，僵尸进程会占资源、也可能在新进程产生时产生未知错误！所以得清理僵尸进程。这两个函数就是用来返回已经终止的子进程的进程ID号，并清除僵尸进程。</p><p><strong>2.函数原型</strong></p><p>include  &lt;sys&#x2F;wait.h&gt;</p><p>pid_t wait(int *statloc);     &#x2F;&#x2F;参数是进程退出时的状态，不在意可设置为NULL</p><p>pid_t  waitpid(pid_t pid,int *status,int options)<br>该函数有三个参数，可以用来指定等待的进程，以及设定阻塞方式，如果这个函数的参数被设置成以下形式，<br>则waitpid函数和wait函数等价<br>waitpid(-1,&amp;status,0)  &#x2F;&#x2F;-1指的是谁先死，我就处理谁，0表示阻塞状态<br>options 使用WNOHANG方式，在子进程没有退出时，waitpid返回，返回值为0</p><p><strong>3.wait函数工作过程</strong><br>①子进程调用exit函数或_exit函数，退出当前进程，exit函数或_exit函数中的参数，会在子进程结束时注册进内核<br>②此时，如果父进程调用wait函数，则内核会通知wait函数回收子进程资源，防止僵尸进程产生<br>③父进程中的wait函数会到内核中寻址，找到刚才关闭的子进程存放的参数，该参数记录了子进程的死亡状态<br>注：子进程的死亡原因可能有三种：<br>1、自杀，即调用exit函数或者return 或者运行结束<br>2、他杀，即被别的进程使用kill关闭当前子进程<br>3、内核错误导致的子进程死亡<br>④实际上在wait调用成功后，wait的参数在内核中找到子进程的死亡原因，并将其保存在参数中。<br>参数里面分了三个部分<br>第一个部分是参数的高八位<br>第二部分是第7位<br>第三部分是低7位<br>因此，对于wait的参数来讲只有两个字节是有意义的<br>_ _ _ _ _ _ _ _ 0 _ _ _ _ _ _ _<br>  自杀情况       内核      他杀</p><p><strong>4.函数代码示例</strong></p><p><strong>以下为wait函数：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">                                                                                         <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token keyword">int</span> prc_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> high_8<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> bit_7<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> low_7<span class="token punctuation">;</span><span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//exit(12);//自杀，退出状态(0～255)</span><span class="token comment">//他杀，用kill命令，kill -9 id 或 kill id(默认是15号信号)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>prc_id <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"waitting for child process %d\n"</span><span class="token punctuation">,</span>prc_id<span class="token punctuation">)</span><span class="token punctuation">;</span>high_8 <span class="token operator">=</span> status <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>bit_7 <span class="token operator">=</span> <span class="token punctuation">(</span>status <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">;</span>low_7 <span class="token operator">=</span> status <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"high_8 %d,bit_7 %d,low_7 %d\n"</span><span class="token punctuation">,</span>high_8<span class="token punctuation">,</span>bit_7<span class="token punctuation">,</span>low_7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>以下为waitpid函数：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> cpid1<span class="token punctuation">,</span>cpid2<span class="token punctuation">;</span><span class="token keyword">int</span> status<span class="token punctuation">;</span><span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is child1 %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cpid1 <span class="token operator">=</span> pid<span class="token punctuation">;</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is child2 %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cpid2 <span class="token operator">=</span> pid<span class="token punctuation">;</span><span class="token comment">//waitpid(cpid2,&amp;status,0);</span><span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span>WNOHANG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is father process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>5.这两个函数的区别和联系：</strong></p><p>从本质上讲，wait和waitpid的作用是完全相同的，但是waitpid多了两个参数，从而使我们的编程能更加的灵活。waitpid有wait没有的三个功能：</p><p>（1）waitpid能等待一个特定的子进程，而wait只能等待任意的子进程，</p><p>（2）系统一旦调用wait函数就会阻塞父进程来等待，直到等到子进程的退出才停止阻塞，而waitpid提供了一种非         阻塞方式的等待，也就是第三个参数，当第三个参数设置为WNOHANG，当子进程没有结束，直接返回0，不等待</p><p>（3）waitpid支持作业控制，提供用于检查wait和waitpid返回状态的宏这两个函数返回的子进程的状态都保存在status指针中</p><h1 id="5、exit与-exit的区别？"><a href="#5、exit与-exit的区别？" class="headerlink" title="5、exit与_exit的区别？*"></a>5、exit与_exit的区别？*</h1><p>都是用于进程退出。</p><p>exit       库调用         stdlib.h        清理IO缓冲区<br>_exit     系统调用      unistd.h      不清理IO缓冲区<br>退出状态（0~255） 2^8   8位</p><p>exit ：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>_exit ：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>打印结果是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">vision@ubuntu<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>exit$ <span class="token punctuation">.</span><span class="token operator">/</span>exit1       <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理了缓存，没有hellohellovision@ubuntu<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>exit$ <span class="token punctuation">.</span><span class="token operator">/</span>exit2  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>没清理缓存，有hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>验证了，exit 退出进程并清理IO缓冲区，_exit退出进程不清理IO缓冲区</p><h1 id="6、fork与vfork区别？"><a href="#6、fork与vfork区别？" class="headerlink" title="6、fork与vfork区别？"></a>6、fork与vfork区别？</h1><p>两者都是用来创建进程<br>①fork() 子进程拷贝父进程的数据段、代码段、堆栈段<br>vfork()子进程与父进程共享数据段<br>②fork()父子进程的执行次序不确定<br>vfork()保证子进程先运行，在调用exec或exit之前与父进程数据是共享的，在它调用exec或exit<br>之后父进程才可能被调度运行。如果在调用这两个函数之前子进程依赖父进程的进一步动作，会导致死锁</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">vfork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is child %d %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is father %d %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is child %d %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is father %d %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>循环fork<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上代码共输出多少个 ’ - ’ ？</p><p>8个，不是6个</p><p>fork()系统调用是Unix下以自身进程创建子进程的系统调用，一次调用，两次返回，如果返回是0，则是子进程，如果返回值&gt;0，则是父进程（返回值是子进程的pid）。在fork()的调用处，整个父进程空间会原模原样地复制到子进程中，包括指令，变量值，程序调用栈，环境变量，缓冲区，等等。先看改进代码，观察进程树：</p><p>有8个’-’是因为printf(“-”);语句有buffer；在fork的时候，缓存被复制到了子进程空间，所以，就多了两个。下图阴影双边框的两个子进程复制了父进程缓冲区的 ‘-‘ </p><p><img src="/images/fork.png" alt="or"></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上代码共输出多少个’-’？</p><p>6个</p><h1 id="7、守护进程"><a href="#7、守护进程" class="headerlink" title="7、守护进程"></a>7、守护进程</h1><p><strong>守护进程</strong><br><strong>概念：</strong>在linux后台运行的进程，不占用终端，随着计算机启动而运行，随着计算机关闭而终止运行。<br>作用：作业是周期性的执行任务或等待处理某些事件。</p><p>创建守护进程中涉及的相关概念：</p><p>Linux系统中，进程是以组的形式（进程之间的层次关系）进行管理的。其中典型的例如，进程组和会话组。</p><p>进程组ID其类型与进程ID一样。一个进程组有一个进程组首进程，也可称之为该进程组的组长，其进程ID为该进程组的ID。</p><p><strong>会话：</strong><br>会话就是一个进程组，或是多个进程组的集合。</p><p><strong>会话组：</strong><br>会话组是一组进程组或进程的集合。一个会话组有一个会话组首进程，也可称之为会话组组长。其进程ID为该会话组的ID，进程的会话成员关系是由其会话组ID（SID）确定的。</p><p><strong>会话组组长：</strong><br>一个会话组有一个会话组首进程，也可称之为会话组组长。</p><p>如何创建一个守护进程（笔试题）</p><p><strong>概念流程：</strong></p><p>①fork创建子进程，父进程exit退出  （使子进程在形式上脱离控制终端）<br>②在子进程中创建新建会话，使其成为会话组长（让子进程完全脱离终端，独立出来）<br>③改变子进程依赖的工作目录  （防止子进程依赖的目录被删除）<br>④重设文件权限掩码  （恢复进程中所操作的文件权限）<br>⑤关闭所有文件描述符 （关闭所有继承于父进程的文件描述符）</p><p><strong>代码：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1:创建子进程，父进程exit退出</span><span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span>“error\n”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//2:在子进程中创建新建会话，使其成为会话组长</span>        <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3:改变子进程依赖的工作目录</span>        <span class="token function">chdir</span><span class="token punctuation">(</span>“<span class="token operator">/</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4:重设文件权限掩码</span>        <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//5:关闭所有文件描述符</span>        <span class="token comment">//getdtablesize()返回文件的最大数量进程可以打开的，比一个文件描述符的最大可能值多一个</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> <span class="token function">getdtablesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment">// for(;i &lt; 3;i++)</span><span class="token punctuation">&#123;</span><span class="token function">close</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//守护进程处理信息（测试代码）</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/vision/2208/IO/1.txt"</span><span class="token punctuation">,</span>O_CREAT <span class="token operator">|</span> O_WRONLY <span class="token operator">|</span>         O_APPEND<span class="token punctuation">,</span><span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>           <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token string">"this is dameon\n"</span><span class="token punctuation">;</span>           <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="8、创建线程pthread-create-pthread-join-pthread-exit"><a href="#8、创建线程pthread-create-pthread-join-pthread-exit" class="headerlink" title="8、创建线程pthread_create\pthread_join\pthread_exit"></a>8、创建线程pthread_create\pthread_join\pthread_exit</h1><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">函数   #include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">></span>       <span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span>                          <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>代码：<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">newthread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new thread is running get msg from main thread:%s %d\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> pt<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread is running\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>newthread<span class="token punctuation">,</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread is to be done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">函数    #include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">></span>        <span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>代码：<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">newthread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new thread is running get msg from main thread:%s %d\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> pt<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread is running\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>newthread<span class="token punctuation">,</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//sleep(3);</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待子线程退出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread is to be done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">函数   #include <span class="token operator">&lt;</span>pthread<span class="token punctuation">.</span>h<span class="token operator">></span>       <span class="token keyword">void</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>代码：<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">newthread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new thread is running get msg from main thread:%s %d\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线程退出</span><span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token string">"再见，主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token class-name">pthread_t</span> pt<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread is running\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>newthread<span class="token punctuation">,</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//sleep(3);</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待子线程退出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"main thread is receive msg from child thread:%s\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="9、线程同步与互斥"><a href="#9、线程同步与互斥" class="headerlink" title="9、线程同步与互斥 **"></a>9、线程同步与互斥 **</h1><p>将共享资源实现排他性访问，一个线程抢占到了共享资源后，其它线程阻塞。</p><p>当一个线程完成对于共享资源的访问时，其它线程互斥地进行共享资源的访问<br>临界资源：能够被互斥访问的共享资源<br>临界区：访问临界资源的代码段</p><p>在多线程中，多个线程由于共享了进程的内存资源，导致资源被多个线程同时访问，可能会造成一些问题<br>改问题解决目的是让共享资源在同一时间段只能被有限个（一个）线程进行访问，我们称为：排他性访问（同步、互斥）</p><h5 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步***"></a>线程同步***</h5><p><strong>同步：指的是多个任务（线程）按照约定的顺序访问相互配合共享资源的过程，即同步是特殊状态下的互斥</strong></p><p><strong>同步信号量</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>semaphore<span class="token punctuation">.</span>h<span class="token operator">></span><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>参数:sem 指向信号量的指针pshared   在线程间还是进程间使用的信号量（0代表线程间使用）<br>                value  该信号量的初值</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//P操作</span><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//V操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><strong>概念</strong>：信号量  是一种在进程或者线程间的特殊共享变量，代表了可用资源的数目。0代表没有资源可用，大于0代表有可用资源<br>一般来说常用的信号量是：二元信号量（二值信号量），即信号量的值只有0或1。<br>使用方式： PV操作<br><strong>P操作</strong>：在线程（进程）访问临界资源时，需要先执行P操作，读取信号量的值，若信号量的值大于0，则减小信号量，进入临界区，访问临界资源；<br>若信号量的值等于0，此时该线程（进程）阻塞在信号量的等待队列中<br><strong>V操作</strong>：当线程访问完毕共享资源后，执行V操作，如信号量的等待对列中没有阻塞的线程（进程），将信号量的值+1，退出共享资源访问。<br>若发现信号量的等待队列中有阻塞的线程（进程），唤醒阻塞线程。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token comment">//打印ABABAB....</span><span class="token class-name">sem_t</span> sem1<span class="token punctuation">,</span>sem2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">th1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//P2</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//V1</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">th2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//P1</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//V2</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> pt1<span class="token punctuation">,</span>pt2<span class="token punctuation">;</span><span class="token comment">//创建信号量1</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建信号量2</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>th1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>th2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>pt1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>pt2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="线程互斥："><a href="#线程互斥：" class="headerlink" title="线程互斥：***"></a>线程互斥：***</h5><p><strong>概念：是一个特殊的共享变量，代表了共享资源是否可用，线程获取了互斥锁。</strong><br><strong>互斥锁有两种状态：加锁、解锁</strong><br><strong>工作流程：</strong><br>主线程中创建互斥锁，默认是未加锁状态<br>子线程i获得了互斥锁，加锁，之后访问共享资源；此时线程k，加锁失败，阻塞<br>子线程i访问完毕共享资源，解锁；线程k 获得了加锁操作，之后访问共享资源<br>当多线程互斥地访问完毕共享资源之后，主线程需要销毁互斥锁</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h5><p><strong>①创建互斥锁</strong>（两种方式创建 一个是加锁解锁，另一个是用全局变量来创建）<br>第一种要写在主线程里面，用的时候全局变量不需要初始化</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">pthread_mutexattr_t</span> <span class="token operator">*</span>mutexattr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>参数：返回值 0代表成功 mutex 互斥锁变量指针mutexattr  互斥锁的属性指针</p><p>第二种  全局变量</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_mutex_t</span> m <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>②加锁&amp;解锁</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p><strong>③删除互斥锁</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token class-name">pthread_mutex_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">///代码</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;pthread.h></span></span><span class="token class-name">pthread_mutex_t</span> m <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span class="token comment">//初始化互斥锁</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">th1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查共享资源是否被另一个线程访问   进入区</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d != %d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//离开共享资源访问代码段，通知其他线程   退出区</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">th2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//检查共享资源是否被另一个线程访问   进入区</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d != %d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//退出区</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">pthread_t</span> pt1<span class="token punctuation">,</span>pt2<span class="token punctuation">;</span><span class="token comment">//pthread_mutex_init(&amp;m,NULL);//初始化互斥锁</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>th1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>th2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>pt1<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止僵尸线程出现</span><span class="token function">pthread_join</span><span class="token punctuation">(</span>pt2<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除互斥锁</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>同步与互斥的区别</strong></p><p><strong>联系：</strong></p><p>同步是一种更为复杂的互斥，而互斥是一种特殊的同步。也就是说互斥是两个线程之间不可以同时运行，他们会相互排斥，必须等待一个线程运行完毕，另一个才能运行，而同步也是不能同时运行，但他是必须要安照某种次序来运行相应的线程（也是一种互斥）。</p><p>互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。　　</p><p>同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。</p><p><strong>区别：</strong></p><p>互斥：是指三部在不同进程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中的任一程序片段，只能等到该进程运行完这个程序片段后才可以运行。</p><p>同步：是指散步在不同进程之间的若干程序片断，它们的运行必须严格按照规定的 某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。　　</p><h1 id="10、线程死锁"><a href="#10、线程死锁" class="headerlink" title="10、线程死锁 ***"></a>10、线程死锁 ***</h1><p><strong>线程死锁</strong></p><p>是指多个线程因竞争资源而造成的一种僵局(互相等待)，若无外力作用，这些进程都将无法向前推进。<br><strong>原因：</strong>线程1持锁A，线程2持锁B，线程1请求锁B，线程2请求锁A；<br>       线程加锁后，不解锁直接退出就会死锁<br><strong>避免：</strong>固定加锁顺序<br>        加锁时限(尝试获取锁时加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁)<br>        死锁检测用一些线程检测工具</p><h1 id="11、线程安全和线程可重入"><a href="#11、线程安全和线程可重入" class="headerlink" title="11、线程安全和线程可重入 ***"></a>11、线程安全和线程可重入 ***</h1><h3 id="线程安全："><a href="#线程安全：" class="headerlink" title="线程安全："></a><strong>线程安全</strong>：</h3><p>线程的执行方式：</p><ul><li>线程之间就像是比赛时的起跑者,如果没有裁判和比赛规则约束,谁都有可能抢跑.谁都有可能领先夺冠.</li><li>线程是抢占式执行的,正是因为这种抢占式的执行方式.引来了线程安全问题</li></ul><p><strong>多个线程同时操作临界资源而不会出现数据二义性。则认为该程序是线程安全的</strong>。</p><p>如下面的程序</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;pthread.h></span></span><span class="token comment">//互斥锁/互斥量</span><span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">THREAD_NUM</span>  <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">int</span> g_count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">ThreadEntry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">500000</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果当前锁已经被其他线程获取到了,</span>    <span class="token comment">//当前线程再想获取就会在lock函数处阻塞</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span>    <span class="token operator">++</span>g_count<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加锁</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化锁</span>  <span class="token class-name">pthread_t</span> tid<span class="token punctuation">[</span>THREAD_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//线程号</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> THREAD_NUM <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>ThreadEntry<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建线程</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>THREAD_NUM<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止僵尸线程</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_count = %d \n"</span><span class="token punctuation">,</span>g_count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//互斥锁销毁</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>【结果分析】</p><p>不加互斥锁，执行五次后结果分别文：g_count &#x3D; 526539 , 785301, 575181,  631726, 519253</p><p>该程序创建了两个线程,若线程安全的话得到的结果应该是2x500000,而不会出现这种情况<br>可以看到多次的执行效果都是不同的,那么多次执行相同的程序为什么会出现不同的结果呢？<br>原因是线程的抢占式执行引起的线程安全问题,<br>当线程A从内存中读到数据进行计算时,没等到线程A结束线程B就从内存中读取了和线程A相同的数据,最后当两个线程将结果写入到内存时,发现两者的执行结果是相同的所以只写了一次.这样导致程序在执行过程中好多次的执行过程都是”无用功”.</p><h3 id="线程可重入"><a href="#线程可重入" class="headerlink" title="线程可重入:"></a><strong>线程可重入</strong>:</h3><p>​是指多个线程调用同一个线程函数或在线程函数内有序调用一组函数，最终结果正确</p><p><strong>可重入</strong>（reentrant）函数可以由多于一个任务并发使用，而不必担心数据错误。相反，不可重入（non-reentrant）函数不能由超过一个任务所共享，除非能确保函数的互斥（或者使用信号量，或者在代码的关键部分禁用中断）。可重入函数可以在任意时刻被中断，稍后再继续运行，不会丢失数据。可重入函数要么使用本地变量，要么在使用全局变量时保护自己的数据。<br>        <strong>可重入</strong>函数不为连续的调用持有静态数据；不返回指向静态数据的指针；所有数据都由函数的调用者提供；使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据。绝不调用任何不可重入函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">eg<span class="token operator">:</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span> <span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>           g_val<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_val: %d\n"</span><span class="token punctuation">,</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"when the fun end, g_val: %d\n"</span><span class="token punctuation">,</span> g_val_main<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果</p><p>按ctrl+c之后程序异常，main函数g_val_main最后打印10</p><p>上面的程序中首先在main函数中注册了一个函数fun，signal函数意思是当收到2号信号时执行自定义的函数也就是fun，而2号函数是由Ctrl+c产生的SIGINT信号，该信号的默认处理动作是终止进程，这里我们捕捉它；设置了一个全局变量g_val,fun函数的功能是每隔1秒将g_val进行加1，最终是想让g_val的值为5。</p><p>上面的结果中，当g_val加到5的时候，键入Ctrl+c，这时进程会收到2号信号，而2号信号会被捕捉到执行fun函数，因为g_val是全局变量，因此执行捕捉信号的函数会继续在全局变量g_val上相加，因此，结果为10。</p><p>修改后：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>           val<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_val: %d\n"</span><span class="token punctuation">,</span> g_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>结果正常</p><p>结果中，当函数两次被调用的时候，两次结果最终并不影响且值相等；所以，上面的程序中，函数fun是可重入函数。</p><p><strong>一个函数想要成为可重入的函数，必须满足下列要求：</strong></p><ul><li>a) 不能使用静态或者全局的非常量数据</li><li>b) 不能够返回地址给静态或者全局的非常量数据</li><li>c) 函数使用的数据由调用者提供</li><li>d) 不能够依赖于单一资源的锁</li><li>e) 不能够调用非可重入的函数</li></ul><p><strong>总结</strong>，一个可重入函数内部使用的数据都应该来自于自身的栈空间，包括返回值也不应该是全局或者静态的；而正是因为其中的操作数据都来自于自身的栈空间，而每次调用函数会开辟不同的栈空间，因此二者互不影响。</p><p><strong>可重入与线程安全联系和区别：</strong></p><p><strong>函数可以是可重入的，是线程安全的，或者二者皆是，或者二者皆非。不可重入的函数不能由多个线程使用。另外，或许不可能让某个不可重入的函数是线程安全的。</strong></p><p>联系：</p><ol><li>函数可以是可重入的，也可以是线程安全的，或者两者皆是，或者两者皆非。不可重入函数不能由多个线程使用。</li><li>可重入函数是线程安全函数的一种，其特点在于它们被多个线程调用时，不会引用任何共享数据。</li><li>可重入函数和线程安全解决的都是对全局或静态数据访问的不一致性。</li></ol><p>区别：<br>      1.线程安全能够使不同的线程访问同一块地址空间，而可重入函数要求不同的执行流对数据的操作互不影响使结果是相同的。<br>      2. 线程安全是在多线程情况下引发的，而可重入函数可以在只有一个线程的情况下发生。<br>      3. 线程安全不一定是可重入的，而可重入函数则一定是线程安全的。<br>      4. 如果一个函数中有全局变量，那么这个函数既不是线程安全也不是可重入的。<br>      5. 如果一个函数当中的数据全是自身栈空间的，则这个函数既是线程安全也是可重入的。</p><p>​      6.如果将对临界资源的访问加锁，则这个函数是线程安全的；但如果重入函数的话加锁还未释放，则会产生死锁，因此不能重入。</p><h1 id="12、进程间通信"><a href="#12、进程间通信" class="headerlink" title="12、进程间通信"></a>12、进程间通信</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h2><h3 id="①管道："><a href="#①管道：" class="headerlink" title="①管道："></a>①管道：</h3><p>管道是最简单，效率最差的一种通信方式。</p><p>管道本质上就是内核中的一个缓存，当进程创建一个管道后，<br>Linux会返回两个文件描述符，一个是写入端的描述符，一个是输出端的描述符，<br>可以通过这两个描述符往管道写入或者读取数据。</p><p>如果想要实现两个进程通过管道来通信，则需要让创建管道的进程fork子进程，<br>这样子进程们就拥有了父进程的文件描述符，这样子进程之间也就有了对同一管道的操作。</p><p>缺点：</p><p>半双工通信，一条管道只能一个进程写，一个进程读。<br>一个进程写完后，另一个进程才能读，反之同理。</p><p><strong>有名管道(可以在任意两个进程之间通信)</strong><br><strong>无名管道（只能在父子进程之间进行通信）</strong><br>（有一个读端和一个写端，缺一不可）</p><p>管道写端关闭，则读端返回值为0；<br>管道读端关闭，则写端会产生异常（会收到信号SIGPIPE）<br>管道为空， 那么读会阻塞<br>管道写满， 那么写会阻塞<br><strong>面试常问：</strong><br>1.有名管道和无名管道的区别：有名管道可以在任意两个进程之间通信；<br>无名管道只能在父子进程之间进行通信<br>2.写入管道的数据在哪里？ 在内存中（不是在磁盘上）<br>3.管道的通信方式： 半双工（数据可以从a到b,也可以从b到a，但是某一时刻只能选择其中一个）</p><h3 id="②消息队列："><a href="#②消息队列：" class="headerlink" title="②消息队列："></a>②消息队列：</h3><p>管道的通信方式效率是低下的，不适合进程间频繁的交换数据。<br>这个问题，消息队列的通信方式就可以解决。<br>A进程往消息队列写入数据后就可以正常返回，B进程需要时再去读取就可以了，效率比较高。</p><p>而且，数据会被分为一个一个的数据单元，称为消息体，<br>消息发送方和接收方约定好消息体的数据类型，不像管道是无格式的字节流类型，<br>这样的好处是可以边发送边接收，而不需要等待完整的数据。</p><p>但是也有缺点，每个消息体有一个最大长度的限制，<br>并且队列所包含消息体的总长度也是有上限的，这是其中一个不足之处。</p><p>另一个缺点是消息队列通信过程中存在用户态和内核态之间的数据拷贝问题。<br>进程往消息队列写入数据时，会发送用户态拷贝数据到内核态的过程，同理读取数据时会发生从内核态到用户态拷贝数据的过程。</p><h3 id="③共享内存："><a href="#③共享内存：" class="headerlink" title="③共享内存："></a>③共享内存：</h3><p>共享内存解决了消息队列存在的内核态和用户态之间数据拷贝的问题。</p><p>现代操作系统对于内存管理采用的是虚拟内存技术，<br>也就是说每个进程都有自己的虚拟内存空间，虚拟内存映射到真实的物理内存。<br>共享内存的机制就是，不同的进程拿出一块虚拟内存空间，映射到相同的物理内存空间。<br>这样一个进程写入的东西，另一个进程马上就能够看到，不需要进行拷贝。</p><h3 id="④信号量："><a href="#④信号量：" class="headerlink" title="④信号量："></a>④信号量：</h3><p>当使用共享内存的通信方式，如果有多个进程同时往共享内存写入数据，有可能先写的进程的内容被其他进程覆盖了。</p><p>因此需要一种保护机制，信号量本质上是一个整型的计数器，用于实现进程间的互斥和同步。</p><p>信号量代表着资源的数量，操作信号量的方式有两种：</p><p>P操作：这个操作会将信号量减一，相减后信号量如果小于0，则表示资源已经被占用了，进程需要阻塞等待；<br>如果大于等于0，则说明还有资源可用，进程可以正常执行。<br>V操作：这个操作会将信号量加一，相加后信号量如果小于等于0，<br>则表明当前有进程阻塞，于是会将该进程唤醒；如果大于0，则表示当前没有阻塞的进程。</p><p>（1）信号量实现互斥：</p><p>信号量初始化为1</p><p>进程 A 在访问共享内存前，先执行了 P 操作，由于信号量的初始值为 1，<br>故在进程 A 执行 P 操作后信号量变为 0，表示共享资源可用，于是进程 A 就可以访问共享内存。<br>若此时，进程 B 也想访问共享内存，执行了 P 操作，结果信号量变为了 -1，<br>这就意味着临界资源已被占用，因此进程 B 被阻塞。<br>直到进程 A 访问完共享内存，才会执行 V 操作，使得信号量恢复为 0，<br>接着就会唤醒阻塞中的线程 B，使得进程 B 可以访问共享内存，<br>最后完成共享内存的访问后，执行 V 操作，使信号量恢复到初始值 1。</p><p>（2）信号量实现同步：</p><p>由于多线程下各线程的执行顺序是无法预料的，有些时候我们希望多个线程之间能够密切合作，<br>这时候就需要考虑线程的同步问题。</p><p>信号量初始化为0</p><p>如果进程 B 比进程 A 先执行了，那么执行到 P 操作时，<br>由于信号量初始值为 0，故信号量会变为 -1，表示进程 A 还没生产数据，于是进程 B 就阻塞等待；<br>接着，当进程 A 生产完数据后，执行了 V 操作，就会使得信号量变为 0，于是就会唤醒阻塞在 P 操作的进程 B；<br>最后，进程 B 被唤醒后，意味着进程 A 已经生产了数据，于是进程 B 就可以正常读取数据了。</p><h3 id="⑤信号："><a href="#⑤信号：" class="headerlink" title="⑤信号："></a>⑤信号：</h3><p>在Linux中，为了响应各种事件，提供了几十种信号，可以通过kill -l命令查看。</p><p>如果是运行在shell终端的进程，可以通过键盘组合键来给进程发送信号，例如使用Ctrl+C产生SIGINT信号，表示终止进程。</p><p>如果是运行在后台的进程，可以通过命令来给进程发送信号，例如使用kill -9 PID产生SIGKILL信号，表示立即结束进程。</p><h3 id="⑥Socket："><a href="#⑥Socket：" class="headerlink" title="⑥Socket："></a>⑥Socket：</h3><p>前面提到的管道，消息队列，共享内存，信号量和信号都是在同一台主机上进行进程间通信，<br>如果想要跨网络和不同主机上的进程进行通信，则需要用到socket。</p><p>实际上，Socket不仅可以跨网络和不同主机进行进程间通信，还可以在同一主机进行进程间通信。</p><p>Socket是操作系统提供给程序员操作网络的接口，根据底层不同的实现方式，通信方式也不同。</p><p>Socket的系统调用：</p><p>int socket(int domain, int type, int protocal)</p><p>针对TCP的Socket通信：<br>服务端和客户端初始化Socket，得到文件描述符<br>服务端调用bind，绑定IP和端口<br>服务端调用listen，进行监听<br>服务端调用accept，等待客户端连接<br>客户端调用connect，向服务端发起连接请求。（TCP三次握手）<br>服务端调用accept返回用于传输的Socket的文件描述符（和第一点得到的Socket不同）<br>客户端使用write写入数据，服务端调用read读取数据<br>客户端断开连接时会调用close，服务端也会调用close（TCP四次挥手）<br>这里要注意的是，调用accept，连接成功得到的Socket是用来传输数据的，而第一次初始化Socket是用来监听的，是两个不同作用的Socket。</p><h2 id="2-代码："><a href="#2-代码：" class="headerlink" title="2.代码："></a>2.代码：</h2><h3 id="①有名管道"><a href="#①有名管道" class="headerlink" title="①有名管道"></a>①有名管道</h3><p>fifo.c       fifo_r.c    fifo_w.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">"./myfifo"</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> EEXIST <span class="token operator">==</span> errno<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"有名管道创建失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"有名管道创建成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./myfifo"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fifo_r listen:%s"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./myfifo"</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fifo_w say:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="②信号"><a href="#②信号" class="headerlink" title="②信号"></a>②信号</h3><p>raise.c    signal.c    alarm.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">raise</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//10秒到后，发送9信号码，关闭所在进程。</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1234567890---sig = %d\n"</span><span class="token punctuation">,</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//signal(SIGINT,SIG_IGN);//忽略2号信号，即不能识别 ctrl c 快捷方式</span>    <span class="token comment">//signal(SIGINT,SIG_DFL);//采用2号信号默认处理方式</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">signal</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span>fun<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//将SIGALRM信号与fun函数关联</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单位为秒数,当时间为0，发送SIGALRM信号给进程，同时唤醒进程    </span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world!------------------i = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当倒计时为3时，将进程挂起(暂停)，直到收到信号位置</span>            <span class="token punctuation">&#125;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1234567890---sig = %d\n"</span><span class="token punctuation">,</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">signal</span><span class="token punctuation">(</span>SIGALRM<span class="token punctuation">,</span>fun<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//将SIGALRM信号与fun函数关联</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单位为秒数,当时间为0，发送SIGALRM信号给进程，同时唤醒进程    </span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world!------------------i = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当倒计时为3时，将进程挂起(暂停)，直到收到信号位置</span>            <span class="token punctuation">&#125;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="③信号灯集"><a href="#③信号灯集" class="headerlink" title="③信号灯集"></a>③信号灯集</h3><p>sem.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: sem.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Sat 20 Aug 2022 02:50:51 PM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/sem.h></span></span><span class="token keyword">union</span> semun <span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>                 <span class="token comment">/* Value for SETVAL 设置信号灯初值*/</span><span class="token keyword">struct</span> <span class="token class-name">semid_ds</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>    <span class="token comment">/* Buffer for IPC_STAT, IPC_SET */</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span>  <span class="token operator">*</span>array<span class="token punctuation">;</span>  <span class="token comment">/* Array for GETALL, SETALL */</span><span class="token keyword">struct</span> <span class="token class-name">seminfo</span>  <span class="token operator">*</span>__buf<span class="token punctuation">;</span>  <span class="token comment">/* Buffer for IPC_INFO (Linux-specific) */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、获取key值</span><span class="token class-name">key_t</span> key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、获取信号灯集</span><span class="token keyword">int</span> semid <span class="token operator">=</span> <span class="token function">semget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>semid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置信号灯集合中信号灯初值</span><span class="token keyword">union</span> semun sem1<span class="token punctuation">,</span>sem2<span class="token punctuation">;</span>sem1<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sem2<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//信号灯编号从0开始</span><span class="token function">semctl</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SETVAL<span class="token punctuation">,</span>sem1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置0号信号灯初值为1</span><span class="token function">semctl</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>SETVAL<span class="token punctuation">,</span>sem2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置1号信号灯初值为0</span><span class="token keyword">struct</span> <span class="token class-name">sembuf</span> seminfo<span class="token punctuation">;</span><span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//子进程</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0号信号灯P操作</span>seminfo<span class="token punctuation">.</span>sem_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_op <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_flg <span class="token operator">=</span> SEM_UNDO<span class="token punctuation">;</span><span class="token function">semop</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span><span class="token operator">&amp;</span>seminfo<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abcdefghijklmnopqrstuvwxyz! -- 子进程\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1号信号灯V操作</span>seminfo<span class="token punctuation">.</span>sem_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_op <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_flg <span class="token operator">=</span> SEM_UNDO<span class="token punctuation">;</span><span class="token function">semop</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span><span class="token operator">&amp;</span>seminfo<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//父进程</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1号信号灯P操作</span>seminfo<span class="token punctuation">.</span>sem_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_op <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_flg <span class="token operator">=</span> SEM_UNDO<span class="token punctuation">;</span><span class="token function">semop</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span><span class="token operator">&amp;</span>seminfo<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0123456789! --- 父进程\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0号信号灯V操作</span>seminfo<span class="token punctuation">.</span>sem_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_op <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>seminfo<span class="token punctuation">.</span>sem_flg <span class="token operator">=</span> SEM_UNDO<span class="token punctuation">;</span><span class="token function">semop</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span><span class="token operator">&amp;</span>seminfo<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="④消息队列"><a href="#④消息队列" class="headerlink" title="④消息队列"></a>④消息队列</h3><p>msgR.c     msgW.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: MsgW.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Sat 20 Aug 2022 10:45:10 AM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSGSIZE</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> mtype<span class="token punctuation">;</span>       <span class="token comment">/* message type, must be > 0 */</span><span class="token keyword">char</span> mtext<span class="token punctuation">[</span>MSGSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* message data */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> MSGTYPE<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、获取key值</span><span class="token class-name">key_t</span> key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"获取key值失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"获取key值成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、创建或打开消息队列使用</span><span class="token keyword">int</span> msgid <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"消息队列创建失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、使用消息队列</span>MSGTYPE msginfo<span class="token punctuation">;</span><span class="token comment">//定义消息队列对象</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MSGTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span>MSGSIZE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MSGR queue recv:%s\n"</span><span class="token punctuation">,</span>msginfo<span class="token punctuation">.</span>mtext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MSGTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("MSGR mtype:");</span><span class="token comment">//scanf("%ld",&amp;(msginfo.mtype));</span>msginfo<span class="token punctuation">.</span>mtype <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MSGR mtext:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>msginfo<span class="token punctuation">.</span>mtext<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span>MSGSIZE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//4、控制消息队列使用</span><span class="token function">msgctl</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span>IPC_RMID<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: MsgW.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Sat 20 Aug 2022 10:45:10 AM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSGSIZE</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> mtype<span class="token punctuation">;</span>       <span class="token comment">/* message type, must be > 0 */</span><span class="token keyword">char</span> mtext<span class="token punctuation">[</span>MSGSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* message data */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">msgbuf</span> MSGTYPE<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、获取key值</span><span class="token class-name">key_t</span> key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"获取key值失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"获取key值成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、创建或打开消息队列使用</span><span class="token keyword">int</span> msgid <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>msgid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"消息队列创建失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、使用消息队列</span>MSGTYPE msginfo<span class="token punctuation">;</span><span class="token comment">//定义消息队列对象</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MSGTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("MSGW mtype:");</span><span class="token comment">//scanf("%ld",&amp;(msginfo.mtype));</span>msginfo<span class="token punctuation">.</span>mtype <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MSGW mtext:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>msginfo<span class="token punctuation">.</span>mtext<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span>MSGSIZE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MSGTYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>msgid<span class="token punctuation">,</span><span class="token operator">&amp;</span>msginfo<span class="token punctuation">,</span>MSGSIZE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MSGW queue recv:%s\n"</span><span class="token punctuation">,</span>msginfo<span class="token punctuation">.</span>mtext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="⑤无名管道"><a href="#⑤无名管道" class="headerlink" title="⑤无名管道"></a>⑤无名管道</h3><p>pipe.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"无名管道创建失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span><span class="token comment">//子进程空间</span>    <span class="token comment">//*************************</span>        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//fd[0]</span>        <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child listen:%s,ok!\n"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//*************************</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span><span class="token comment">//父进程空间</span>    <span class="token comment">//*************************</span>        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"good good study,day day up!"</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//fd[1]</span>        <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father say:%s\n"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//*************************</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="⑥共享内存"><a href="#⑥共享内存" class="headerlink" title="⑥共享内存"></a>⑥共享内存</h3><p>shmR.c     shmW.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: ShmW.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Sat 20 Aug 2022 10:08:29 AM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHMSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、获取key值</span><span class="token class-name">key_t</span> key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"获取key值失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"获取key值成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、创建/打开共享内存</span><span class="token keyword">int</span> shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>SHMSIZE<span class="token punctuation">,</span>IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"创建共享内存失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、映射共享内存</span><span class="token keyword">char</span> <span class="token operator">*</span>shmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> shmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"共享内存映射失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//共享内存使用：和普通操作相同</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmr read:%s\n"</span><span class="token punctuation">,</span>shmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>shmp<span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>shmp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SHMSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmr write:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>shmp<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4、撤销共享内存地址</span><span class="token function">shmdt</span><span class="token punctuation">(</span>shmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5、删除共享内存</span><span class="token function">shmctl</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span>IPC_RMID<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: ShmW.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Sat 20 Aug 2022 10:08:29 AM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/shm.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHMSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1、获取key值</span><span class="token class-name">key_t</span> key <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"获取key值失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"获取key值成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2、创建/打开共享内存</span><span class="token keyword">int</span> shmid <span class="token operator">=</span> <span class="token function">shmget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>SHMSIZE<span class="token punctuation">,</span>IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>shmid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"创建共享内存失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、映射共享内存</span><span class="token keyword">char</span> <span class="token operator">*</span>shmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> shmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"共享内存映射失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//共享内存使用：和普通操作相同</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>shmp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>SHMSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmw send:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>shmp<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>shmp<span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shmw recv:%s\n"</span><span class="token punctuation">,</span>shmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//4、撤销共享内存地址</span><span class="token function">shmdt</span><span class="token punctuation">(</span>shmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="⑦socket"><a href="#⑦socket" class="headerlink" title="⑦socket"></a>⑦socket</h3><p>TCP&#x2F;IP    server.c      client.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: server.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Wed 26 Oct 2022 03:14:58 PM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span>          <span class="token comment">/* See NOTES */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span>  <span class="token comment">//struct timeval结构体头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IP</span>  <span class="token string">"192.168.43.127"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Port</span> <span class="token expression"><span class="token number">8888</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//socket</span><span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"获取套接字成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> optval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token operator">&amp;</span>optval<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>optval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bind</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serverinfo<span class="token punctuation">;</span>serverinfo<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//地址族</span>serverinfo<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口</span>serverinfo<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IPV4地址</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serverinfo<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>serverinfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务器地址绑定成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//listen</span>ret <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"监听成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clientinfo<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clientinfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//accept 通信是以accept返回值作为通信桥梁</span><span class="token keyword">int</span> acceptfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientinfo<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>acceptfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"接收客户端连接成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//设置超时时间</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>acceptfd<span class="token punctuation">,</span>SOL_SOCKET<span class="token punctuation">,</span>SO_RCVTIMEO<span class="token punctuation">,</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//recv</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//memset(buff,0,sizeof(buff));</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>acceptfd<span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"接收超时2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"接收ip为:%s,端口为:%d的客户端消息为:%s\n"</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clientinfo<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ntohs</span><span class="token punctuation">(</span>clientinfo<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//close</span><span class="token function">close</span><span class="token punctuation">(</span>acceptfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*************************************************************************> File Name: client.c> Author   : Songlongji> Mail   : 1042046836@qq.com > Created Time: Wed 26 Oct 2022 03:32:49 PM CST> Description:  ************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span>          <span class="token comment">/* See NOTES */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IP</span>  <span class="token string">"192.168.43.127"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Port</span> <span class="token expression"><span class="token number">8888</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//socket</span><span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//connect</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serverinfo<span class="token punctuation">;</span>serverinfo<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">//地址族</span>serverinfo<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口</span>serverinfo<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IPV4地址</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serverinfo<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>serverinfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端连接服务器地址成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//send</span><span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端发送数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//close</span><span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>UDP    server.c     client.c</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IP</span> <span class="token string">"192.168.2.185"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Port</span> <span class="token expression"><span class="token number">6666</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//socket</span><span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//bind</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> info<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>info<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"绑定地址成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> clientinfo<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clientinfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//recvform</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>clientinfo<span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"接收客户端发送数据:%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"服务器发送数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sendto</span>ret  <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>clientinfo<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IP</span> <span class="token string">"192.168.2.185"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Port</span> <span class="token expression"><span class="token number">6666</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//socket</span><span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sockfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//bind</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> info<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>info<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>Port<span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"客户端发送数据:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sendto</span><span class="token keyword">int</span> ret  <span class="token operator">=</span> <span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//recvform</span>ret <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"接收服务器数据为:%s\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="13、有名信号量和无名信号量"><a href="#13、有名信号量和无名信号量" class="headerlink" title="13、有名信号量和无名信号量"></a>13、有名信号量和无名信号量</h1><h2 id="有名信号量"><a href="#有名信号量" class="headerlink" title="有名信号量"></a>有名信号量</h2><p>使用范围：进程，主要作用是处理同步互斥。</p><p>1.创建或者打开一个有名信号量sem_open（）</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">sem_t</span> <span class="token operator">*</span><span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">int</span> oflag<span class="token punctuation">,</span><span class="token class-name">mode_t</span> mode<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name： 有名信号量的名字，以"/"开头 </span><span class="token comment">//oflag： 标志位 O_CREAT --> 就必须设置mode和value</span><span class="token comment">//O_EXCL --> 存在报错 </span><span class="token comment">//mode： 八进制权限 0777 0666 </span><span class="token comment">//value： 信号量初始化的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2.操作信号量 p–&gt;sem_post &#x2F; V–&gt;sem_wait</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//P : 资源数加1 灯亮 0 --> 1 </span><span class="token comment">//V : 资源数减1 灯灭 1 --> 0</span><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sem: 有名信号量的指针地址</span><span class="token comment">//返回值： 成功: 0 失败：-1</span><span class="token comment">//注：写入了数据后，资源数应该加1，当资源数为1时，才能把数据读取出来，并且读取完成后资源数需减1！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>3.关闭信号量  sem_close()</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sem_close</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sem: 有名信号量的指针地址</span><span class="token comment">//返回值： 成功: 0 失败：-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>4.删除信号量 sem_unlink()</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name: 有名信号量的名字</span><span class="token comment">//返回值： 成功: 0 失败：-1</span><span class="token comment">// 分别取一块共享内存中处理数据，但是使用有名信号量来处理同步互斥！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="无名信号量"><a href="#无名信号量" class="headerlink" title="无名信号量"></a>无名信号量</h2><p>使用范围：线程，主要作用是处理同步互斥。</p><p>无名信号量没有名字，只能初始化。</p><p>1.初始化无名信号量 sem_init</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sem: 信号量的地址 </span><span class="token comment">//pshared： 0 --> 作用于线程 非0 --> 作用于进程 </span><span class="token comment">//value： 信号量起始值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2.p–&gt;sem_post &#x2F; V–&gt;sem_wait</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//P : 资源数加1 灯亮 0 --> 1</span><span class="token comment">//V : 资源数减1 灯灭 1 --> 0</span><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sem: 有名信号量的指针地址</span><span class="token comment">//返回值： 成功: 0 失败：-1</span><span class="token comment">//注：//注：写入了数据后，资源数应该加1，当资源数为1时，才能把数据读取出来，并且读取完成后资源数需减1！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>3.销毁无名信号量 sem_destroy()</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token class-name">sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sem: 信号量的地址</span><span class="token comment">//返回值： 成功： 0 失败： -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>​1.有名信号量和无名信号量的差异在于创建和销毁的形式上，但是其他工作一样。</p><p>​2.无名信号量只能存在于内存中，要求使用信号量的进程必须能必须能访问信号量所在的这一块内存，所以无名信号量只能应用在同一进程内的线程之间，或者不同进程中已经映射相同内存内容到它们的地址空间中的线程。意思是无名信号量只能通过共享内存访问。</p><p>​3.有名信号量可以通过名字访问，因此可以被任何知道它们名字的进程中的线程使用。</p><p>​（单个进程中使用POSIX型号量时，无名信号量更简单。多个进程间使用POSIX信号量是，有名信号量更简单。）</p><h1 id="14、消费者生产者模型"><a href="#14、消费者生产者模型" class="headerlink" title="14、消费者生产者模型"></a>14、消费者生产者模型</h1><h3 id="单个生产者和消费者模型（产品缓冲区为100）"><a href="#单个生产者和消费者模型（产品缓冲区为100）" class="headerlink" title="单个生产者和消费者模型（产品缓冲区为100）"></a>单个生产者和消费者模型（产品缓冲区为100）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token comment">//定义全局变量 </span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> mutex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> empty <span class="token operator">=</span> N<span class="token punctuation">;</span><span class="token comment">//缓冲区 空槽的数目</span><span class="token keyword">int</span> full <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//缓冲区 满槽的数目</span><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> start <span class="token punctuation">,</span>end<span class="token punctuation">;</span><span class="token comment">// start 指向取出的值 end 指向要插入的槽</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token comment">// 用来延迟一段时间</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>num <span class="token operator">*=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> mutex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mutex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mutex <span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> mutex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mutex <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> item<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//随即产生一个数据</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"产生%d  \n"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">down</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">down</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"生产者获得缓冲区的使用权\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buffer<span class="token punctuation">[</span><span class="token punctuation">(</span>start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"生产者释放缓冲区的使用权\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> item<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">down</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">down</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"消费者获得缓冲区的使用权\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token punctuation">(</span>end <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> N<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出第%d ，值为%d"</span><span class="token punctuation">,</span>end<span class="token operator">--</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"消费者释放缓冲区的使用权\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">up</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">/*produce(); 这样将一直在这个函数中 而不能跳出consumer();*/</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="火车站卖票多线程（3个窗口卖票）"><a href="#火车站卖票多线程（3个窗口卖票）" class="headerlink" title="火车站卖票多线程（3个窗口卖票）"></a>火车站卖票多线程（3个窗口卖票）</h2><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token class-name">pthread_mutex_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tickets<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p窗口卖出一张票%d\n"</span><span class="token punctuation">,</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>        tickets<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> buyTicket<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create thread error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​        ​</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言总复习</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E6%80%BB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E6%80%BB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="1、关键字"><a href="#1、关键字" class="headerlink" title="1、关键字"></a>1、关键字</h1><p>ANSI C标准C语言共有32个关键字，9种控制语句，程序书写形式自由，区分大小写。</p><p>关键字是由系统预定义的词法符号，有特定的含义，不允许用户重新定义。</p><ul><li>auto：存储，自动类型 int a&#x3D; 10; &#x3D;&#x3D; auto int a &#x3D; 10; auto可以省略。</li><li>break：结束当前循环，switch…case…语句。</li><li>case：switch…case…语句。</li><li>char：字符型数据。</li><li>const：常量化，C中声明只读变量，在程序运行过程中不被改变的数据。</li><li>continue：用于循环，结束本次循环。</li><li>default：switch…case…语句。</li><li>do：循环 do用于do…while循环，循环有三种do…while,while…,for…。</li><li>double：双精度浮点类型。</li><li>else：条件分支 if…else…。</li><li>enum：枚举类型，把已知情况一一列举出来。注意用法（数据结构错误码，尤其在定义函数返回值时，当返回标识类的数字时，在函数返回时不允许写1、2、3等数字，目的可读性、可修改性）。</li><li>extern：外部调用，一般情况下用于多文件对全局变量的引用。</li><li>float：单精度浮点类型。</li><li>for：循环。</li><li>goto：无条件跳转，应用层用的不多，驱动里面常用，一般用于出现错误时资源释放或者资源销毁的语句结构。</li><li>if：条件分支。</li><li>int：整型。</li><li>long：长整型。</li><li>register：寄存器类型，存储类型，register int a &#x3D; 10,由编译器决定是否是寄存器类型变量。</li><li>return：函数返回（可以带参数，也可不带参数）。</li><li>short：短整型。</li><li>signed：有符号+&#x2F;- ，存储时要注意。</li><li>sizeof：类型或变量所占空间大小。</li><li>static：存储类型 静态变量（静态全局、静态局部），静态函数。</li><li>struct：结构体，结构体是一种自定义数据类型，用于将基本数据类型或自定义数据类型打包在一起，视为一个整体。</li><li>switch：switch…case…语句，选择语句。</li><li>typedef：对已知数据类型起别名。</li><li>union：共同体，如何分配内存，注意内存使用思想。</li><li>unsigned：无符号。</li><li>void：空类型&#x2F;万能数据类型，一般用于指针。</li><li>volatile：防止编译器优化。arm汇编进行详细讲解，一般用于硬件编程。</li><li>while：循环。</li></ul><p>(1)存储类型（表示数据在内存中存储位置）：auto、static、extern、register</p><p>(2)基本数据类型（表示数据在内存上所占空间大小）：signed、unsigned、char、short、int、long、float、double</p><p>(3)控制语句类型：if、else、switch、do、while、for</p><p>(4)辅助控制语句：break、continue、return、case、default、goto</p><p>(5)构造数据类型：struct、union、typedef、enum</p><p>(6)其它类型：void、const、sizeof、volatile</p><h1 id="2、标识符命名"><a href="#2、标识符命名" class="headerlink" title="2、标识符命名"></a>2、标识符命名</h1><p>C语言中把标识符分为三类：关键字，预定义标识符，用户自定义标识符。</p><p>C语言标识符命名规则是：</p><ol><li>标识符由字母（A-Z,a-z）、数字（0-9）、下划线“_”组成，并且首字符不能是数字，但可以是字母或者下划线。例如，正确的标识符：abc，a1，prog_to。</li><li>不能把C语言关键字作为用户标识符，例如if ,for, while等。</li></ol><p>驼峰命名法：表示一个变量名由单词组成时，单词首字母大写。<br>iListSize。i 表示为int类型，list size 表示变量的具体用途 。</p><p>匈牙利命名法：多个单词时，单词之间用“_”分隔。<br>i_list_size。i 表示为int类型，list size 表示变量的具体用途。</p><p>变量名一般使用英文。</p><h1 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h1><ul><li><p>基本类型</p><ul><li>数值类型<ul><li>整型<ul><li>短整型（short）</li><li>整型（int）</li><li>长整型（long）</li></ul></li><li>浮点型<ul><li>单精度型（float）</li><li>双精度型（double）</li></ul></li></ul></li></ul></li><li><p>字符类型（char）</p></li><li><p>构造类型</p><ul><li>数组类型</li><li>结构体型（struct）</li><li>共用体型（union）</li><li>枚举类型（enum）</li></ul></li><li><p>指针类型</p></li><li><p>空类型（void）</p></li></ul><p>作用：</p><ol><li><strong>用来区分数据的格式，表示数据所占内存空间大小</strong>。</li><li>因为多种数据类型可以使C语言的使用更高效，方便，降低操作难度。（存储数据）</li><li>因为有很多变量它们并不全是一样的，有自己的特点，这就需要划分成不同的数据类型。（值域范围不同）</li></ol><p>C语言的三种基本数据类型为整型，实型（浮点型），字符型。</p><ol><li>整型，包括short, int, long等，用以表示一个整数，默认为有符号型，配合unsigned关键字，可以表示为无符号型。</li><li>实型，即浮点型，包括float, double等，用来表示实数，相对于整型，该类型可以表示带有小数部分的数值。需要注意的是，实型在计算机语言中为近似值表示，并非准确值，在多次计算后可能会出现真值偏差。</li><li>字符型，即char型，用来表示各种字符，与ascii码表一一对应。除可以用来表示各类字符外，char型的其它规则与整型相同，可以认为char是一种特殊的整型。</li></ol><p>在16位、32位、64位操作系统下，char、short、int、long、float、double分别在内存中所占的字节数：</p><table><thead><tr><th align="center"></th><th align="center">char</th><th align="center">short</th><th align="center">int</th><th align="center">long</th><th align="center">float</th><th align="center">double</th></tr></thead><tbody><tr><td align="center">16位</td><td align="center">1</td><td align="center">2</td><td align="center">2</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">32位</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">4</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">64位</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">8</td><td align="center">4</td><td align="center">8</td></tr></tbody></table><p>原码、反码、补码之间关系：</p><ul><li><p>原码：主要用于显示数据</p></li><li><p>反码：主要用于过渡计算补码</p></li><li><p>补码：主要用于存储和运算</p></li><li><p>例：正数：65</p><p>​原码、反码、补码：0100 0001</p><p>​负数：-65 </p><p>​原码：1100 0001</p><p>​反码：1011 1110</p><p>​补码：1011 1111</p></li><li><p>有符号（signed），可以储存负整数、0、正整数。</p></li><li><p>无符号（unsigned），只可以储存0或正整数。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> main（<span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span>）<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 -5</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出 3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>有符号与无符号区别：</p><p><img src="/images/%E6%9C%89%E7%AC%A6%E5%8F%B7%E4%B8%8E%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8C%BA%E5%88%AB.png"></p><p>无符号表示范围：</p><p><img src="/images/%E6%97%A0%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA%E8%8C%83%E5%9B%B4.png"></p><p>有符号表示范围：</p><p><img src="/images/%E6%9C%89%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA%E8%8C%83%E5%9B%B4.png"></p><p>值域范围：</p><table><thead><tr><th align="center">名称</th><th align="center">在内存上所占空间大小（单位：字节）</th><th align="left">值域范围</th></tr></thead><tbody><tr><td align="center">unsigned char 无符号字符型</td><td align="center">1</td><td align="left">0<del>255（0</del>2^8-1）</td></tr><tr><td align="center">signed char 有符号字符型</td><td align="center">1</td><td align="left">-128<del>127（-2^7</del>2^7-1）</td></tr><tr><td align="center">unsigned short 无符号短整型</td><td align="center">2</td><td align="left">0<del>65535（0</del>2^16-1）</td></tr><tr><td align="center">signed short 有符号短整型</td><td align="center">2</td><td align="left">-32768<del>32767（-2^15</del>2^15-1）</td></tr><tr><td align="center">unsigned int 无符号整型</td><td align="center">4</td><td align="left">0<del>4,294,967,295（0</del>2^32-1）</td></tr><tr><td align="center">signed int 有符号整型</td><td align="center">4</td><td align="left">-2,147,483,648<del>2,147,483,647（-2^31</del>2^31-1）</td></tr><tr><td align="center">unsigned long 无符号长整型</td><td align="center">4</td><td align="left">0<del>4,294,967,295（0</del>2^32-1）</td></tr><tr><td align="center">signed long 有符号长整型</td><td align="center">4</td><td align="left">-2,147,483,648<del>2,147,483,647（-2^31</del>2^31-1）</td></tr></tbody></table><p>浮点类型的存储大小、值范围和精度：</p><table><thead><tr><th align="center">类型</th><th align="center">在内存上所占空间大小（单位：字节）</th><th align="center">值域范围</th><th align="center">精度</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4</td><td align="center">1.2E-38~3.4E+38</td><td align="center">6位有效位</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">2.3E-308~1.7E+308</td><td align="center">15位有效位</td></tr><tr><td align="center">long double</td><td align="center">16</td><td align="center">3.4E-4932~1.1E+4932</td><td align="center">19位有效位</td></tr></tbody></table><p>注：</p><ol><li>浮点型存储方式和整型存储方式不同。</li><li>浮点型数由于存在模糊位，所以无法准确表示，而是以范围存在。</li></ol><p>例题-判断如下类型与零值的大小：int、float、指针。</p><p>int a;  if(a &#x3D;&#x3D; 0)</p><p>float a;  if(a &lt; 0.000001 &amp;&amp; -0.000001 &lt; a)</p><p>int *p;  if(p &#x3D;&#x3D; NULL)</p><h1 id="4、常量"><a href="#4、常量" class="headerlink" title="4、常量"></a>4、常量</h1><p>在程序运行期间其数值不发生变化的数据。</p><ul><li><p>整型常量：</p><ul><li>八进制：要使得使用的数据表达形式是八进制，需要在常数前加上0进行修饰，八进制所包含的数字是0~7。</li><li>十进制：十进制是不需要在其前面添加前缀的，十进制中所包含的数字为0~9。</li><li>十六进制：常量前面使用0x或0X作为前缀，表示该常量是用十六进制进行表示的。十六进制中包含数字0<del>9以及字母A</del>F，其中字母A~F可以使用大写形式，也可以使用小写形式。</li></ul><blockquote><p>这些整数都是以二进制的方式存放在计算机的内存之中，其数值是以补码的形式进行表示的。一个正数的补码与其原码的形式相同，一个负数的补码是将该数绝对值的二进制形式按位取反再加1。</p><p>对于有符号整数，其在内存中存放的最左边一位表示符号位，如果该位为0，则说明该数为正；若为1，则说明该数为负。</p></blockquote></li><li><p>浮点型常量：4.3556，-2.2345，3.2e-3(3.2<em>10^-3)，3.2e3&#x2F;3.2e+3(3.2</em>10^3)</p></li><li><p>字符常量：一般字符常量用单引号’’包含的一个字符，‘a’  ‘!’  ‘A’  ‘\’  ‘\23’  ‘\x27’  ‘\&#39;  ‘\0’</p><p>字符常量都是char类型，在内存中占一个字节，每一个字符对应一个ASCII码（0~255）。</p><ul><li>普通字符：ASCII码从32~126对应的字符</li></ul></li><li><p>控制字符：\r(回车)  \n（换行）</p><ul><li><p>控制字符使用转义字符表示（以‘\’为前缀开头）</p><p>转义字符分为两种：</p><p>\单字符</p><ul><li>\a 响铃；</li><li>\b 退格；</li><li>\f 换页；</li><li>\n 换行；</li><li>\r 回车；</li><li>\t 水平制表；</li><li>\v 垂直制表；</li><li>\\代表一个反斜杠字符“\”；</li><li>\’ 代表一个单引号字符；</li><li>? 代表一个问号；</li><li>\0 空字符；</li></ul><p>\整型数</p><ul><li>‘\134’类似于这种字符，要求必须是最多三位的8进制数</li><li>‘\x3e’类似于这种字符，要求必须是最多两位的16进制数，并且需要格式标记x</li></ul></li></ul></li><li><p>字符串常量：</p><ul><li>字符串：由若干个字符+’\0’组成。</li><li>字符串常量 必须使用“”保存，字符串默认携带结束标记’\0’,但是该标记不显示。</li></ul></li><li><p>宏：宏定义又称为宏替换、宏代换，简称“宏”。在 C 语言中，可以采用命令 #define 来定义宏。</p><p><code>#define</code>定义的是不带类型的常数，只进行简单的字符替换。</p><ul><li><p>宏名一般用大写</p></li><li><p>宏定义末尾不加分号</p></li><li><p>可以用#undef命令终止宏定义的作用域</p></li><li><p>宏定义可以嵌套</p></li><li><p>字符串“”中永远不包含宏</p></li><li><p>宏替换在编译前进行，不分配内存，变量定义分配内存，函数调用在编译后程序运行时进行，并且分配内存</p></li><li><p>预处理是在编译之前的处理，而编译工作的任务之一就是语法检查，预处理不做语法检查</p></li><li><p>使用宏可提高程序的通用性和易读性，减少不一致性，减少输入错误和便于修改。例如：数组大小常用宏定义</p></li><li><figure><div class="code-wrapper"><pre><code class="c">#define MIN(a,b)  ((a) &gt; (b) ? (b) : (a))  //输出最小值#define FUN(arr)  sizeof(arr) / sizeof(arr[0])  //计算数组大小#define NUM   (365 * 24 * 3600)UL  //计算一年有多少秒<pre class="line-numbers language-none"><code class="language-none"># 5、变量在程序运行期间可以改变的量。- 变量的初始化与赋值  - 变量的初始化相当于在分配内存时写入一个值，如果不写入，那么是一个随机值。    赋值指的是在程序运行过程中动态改变变量所占内存的值。    定义变量但不初始化，变量所占内存中是随机值。- 变量的调用（引用）  - 通过变量名调用。    在程序运行时，变量占据一定大小的存储空间，其大小由数据类型决定的，变量名作为访问某变量的内存空间首地址入口，变量所占内存的开始地址称为变量的地址。    ![](&#x2F;images&#x2F;变量的调用.png)注：定义变量一定要初始化，初始化的值根据实际情况定。如果不初始化，会是一个随机值。- 局部变量：在函数或块中声明的变量称为局部变量。它必须在块的开始处声明。  - &#96;&#96;&#96;c    void function1()&#123;          int x&#x3D;10;&#x2F;&#x2F;local variable      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></code></pre></li><li><p>在使用局部变量之前必须要初始化它。</p></li></ul></li><li><p>全局变量：在函数或块之外声明的变量称为全局变量。任何函数都可以改变全局变量的值。它可用于所有函数。它必须在块的开始处声明。</p><ul><li>&#96;&#96;&#96;c<br>int value&#x3D;20;&#x2F;&#x2F; 全局变量<br>void function1(){<br>int x&#x3D;10;&#x2F;&#x2F; 局部变量<br>}<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">- 静态变量：用static关键字声明的变量称为静态变量。它在多个函数调用之间保留其值。  - &#96;&#96;&#96;c    void function1()&#123;          int x &#x3D; 10; &#x2F;&#x2F; 局部变量        static int y &#x3D; 10; &#x2F;&#x2F; 静态变量        x &#x3D; x + 1;          y &#x3D; y + 1;          printf(&quot;%d,%d&quot;, x, y);      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li><li><p>自动变量：默认情况下，在块内声明的C语言中的所有变量都是自动变量。通过我们可以使用auto关键字显式声明自动变量。</p><ul><li><figure><div class="code-wrapper"><pre><code class="c">void main()&#123;      int x=10;//local variable (also automatic)      auto int y=20;//automatic variable  &#125;<pre class="line-numbers language-none"><code class="language-none">- 外部变量：通过使用外部变量来共享多个C源文件中的变量。 要声明一个外部变量，需要使用extern关键字。  - &#96;&#96;&#96;c    extern int x &#x3D; 10; &#x2F;&#x2F; 外部变量 (也可叫全局变量)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></code></pre></li><li><p>&#96;&#96;&#96;c<br>#include “myfile.h”<br>#include &lt;stdio.h&gt;<br>void printValue(){<br>printf(“Global variable: %d”, global_variable);<br>}</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">- 内存图  ![](&#x2F;images&#x2F;内存图.png))  - 内存分布说明    内核空间：放置操作系统相关的代码和数据。（用户不能直接进行操作 ------ 可以通过调用系统提供的 api 函数）。    栈：又叫堆栈，非静态局部变量&#x2F;函数参数&#x2F;返回值等等，栈是向下增长的。    内存映射段：是高效的I&#x2F;O映射方式，用于装载一个共享的 动态内存库。用户可使用系统接口创建共享共享内存，做进程间通信。    堆：用于程序运行时动态内存分配，堆是可以上增长的。    数据段(全局区、静态区)：存储全局数据和静态数据。    代码段（常量区、代码区）：可执行的代码&#x2F;只读常量。### 堆与栈的区别- 申请方式：栈区内存由系统自动分配，函数结束时释放；堆区内存由程序员自己申请，并指明大小，用户忘释放时，会造成内存泄露，不过进程结束时会由系统回收。- 申请后系统的响应：只要栈的剩余空间大于所申请的空间，系统将为程序提供内存、否则将报异常提示栈溢出；堆区，空闲链表，分配与回收机制，会产生碎片问题(外部碎片)-- (固定分区存在内部碎片(分配大于实际)，可变分区存在外部碎片(太碎无法分配)。- 申请大小的限制：栈是 1 或者 2M，可以自己改，但是最大不超过 8M；堆，看主机是多少位的如果是 32 位，就是 4G。- 申请效率：栈由系统自动分配，速度较快，程序员无法控制；堆是由 new 分配的内存，一般速度较慢,而且容易导致内存碎片，但是用起来方便！- 存储内容：栈，函数调用(返回值，各个参数，局部变量(静态变量不入栈))；堆，一般在堆的头部用一个字节存放堆的大小，堆中的具体内容由程序员安排。- 存取效率的比较：栈比堆快，Eg：char c[]&#x3D;1234567890；char *p&#x3D;&quot;1234567890&quot;；读取[1]和 p[1]，c[1]，读取时直接吧字符串中的元素读到寄存器 c 中，而 p[1]先把指针值读到edx 中，再根据 edx 读取字符，多一次操作。- 管理方式不同：栈，数据结构中的栈；堆，链表。- 生长方向：栈，高到低；堆，低到高。# 6、类型转换## 定义强制数据类型的转换是指采用某种方式将某种数据类型强制转换成指定的数据类型。### 6.1强制类型转换&#96;&#96;&#96;ceg: int a &#x3D; 0;char b &#x3D; (char)a;笔试题：1、现有一个绝对地址0xbf988c5c，要求给这个确定的地址赋值为整型数50 *(( int*)0xbf988c5c)&#x3D;502、想让程序跳转到绝对地址是0x100000去执行，应该怎么做？*(void(*)void)0x100000();3、mallocvoid *malloc(int size);eg：分配100个int类型的空间：int *p;p &#x3D; (int *)malloc( sizeof(int) * 100 );4、大小端给定 int类型的变量a，赋值为1，1的16进制为：00 00 00 01。若小端存储则a中存储为：01 00 00 00。大端存储为：00 00 00 01。则可以取出a的地址强转为char*类型，*(char*)&amp;a来判断值为0&#x2F;1。如果是0则为大端存储，是1为小端存储。int main()&#123;    int a &#x3D; 1;    &#x2F;&#x2F;00 00 00 01    (*(char*)&amp;a) &#x3D;&#x3D; 1 ? printf(&quot;小&quot;) : printf(&quot;大&quot;)；    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li></ul><p>注意：</p><p>1、强制类型转换符后面的表达式如存在复杂运算，一定要用小括号括起来</p><p>2、强制类型转换符是一种不安全的转换，将高级类型转换成低级类型，要丢失数据的精度</p><p>3、强制类型转换并不改变表达式中变量和数据类型和值</p><h3 id="6-2隐式类型转换"><a href="#6-2隐式类型转换" class="headerlink" title="6.2隐式类型转换"></a>6.2隐式类型转换</h3><p>①   符号转换**</p><p>无符号整型数与有符号整型数一起运算时，会将有符号整型数自动转换为无符号整型数</p><p>①   字节转换</p><p>低字节给高字节赋值没有影响，但是高字节给低字节赋值，会出现数据错误</p><p>②   精度转换</p><p>低精度给高精度赋值没有影响，但是高精度给低精度赋值，会出现数据丢失</p><p>在表达式中，一般运算结果会逐渐向高字节、高精度靠近</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">eg<span class="token operator">:</span>下面的代码输出是什么，为什么？<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>a<span class="token operator">+</span>b <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"> 6"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"&lt;= 6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  输出 ：  <span class="token operator">></span><span class="token number">6</span>     <span class="token operator">-</span><span class="token number">14</span>    <span class="token number">2</span><span class="token operator">^</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token number">14</span>  一起运算会将有符号转为无符号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="7、运算符"><a href="#7、运算符" class="headerlink" title="7、运算符"></a>7、运算符</h1><h2 id="7-1算术运算"><a href="#7-1算术运算" class="headerlink" title="7.1算术运算"></a>7.1算术运算</h2><p>&#x2F;   %   *   +  -  ++    –</p><p>注：”&#x2F;”运算：若运算符左右两侧都为整型，则结果必是整型<br>若运算符有一侧为浮点型，则结果必是浮点型<br>“%”运算：在C语言中只能对整型取余<br>“++”运算：<br>若a++,++a单独成句，则没有区别，都是a &#x3D; a+1；<br>若a++,++a出现在表达式中<br>a++表示先使用a的值，然后执行a&#x3D;a+1操作<br>++a表示先执行a&#x3D;a+1操作，然后再用a的值<br>– 运算同理++</p><h2 id="7-2逻辑运算"><a href="#7-2逻辑运算" class="headerlink" title="7.2逻辑运算"></a>7.2逻辑运算</h2><p>&amp;&amp; : 全真为真，一假则假 </p><p>截断法则：若运算符左侧为假，则整个表达式结果必为假，且右侧表达式不参与运算</p><p>|| : 一真为真，全假为假 </p><p>截断法则：运算符左侧为真，则整个表达式为真，且右侧不参与运算</p><p>! : 真变假，假变真</p><p>0为假 非0为真</p><h2 id="7-3赋值运算"><a href="#7-3赋值运算" class="headerlink" title="7.3赋值运算"></a>7.3赋值运算</h2><p>&#x3D;    +&#x3D;    -&#x3D;     *&#x3D;    &#x2F;&#x3D;</p><p>注：①运算顺序都是从右向左，左侧必须是变量，右侧任意</p><p>② a+&#x3D;3 &#x2F;&#x2F;a &#x3D; a+3</p><p>③若语法正确，赋值运算恒成立</p><h2 id="7-4两数交换四种方法"><a href="#7-4两数交换四种方法" class="headerlink" title="7.4两数交换四种方法"></a>7.4两数交换四种方法</h2><p>tmp&#x3D;a a&#x3D;b b&#x3D;tmp<br>x&#x3D;x+y y&#x3D;x-y x&#x3D;x-y<br>a&#x3D;a*b b&#x3D;a&#x2F;b a&#x3D;a&#x2F;b<br>a&#x3D;a^b b&#x3D;a^b a&#x3D;a^b</p><h2 id="7-5关系运算"><a href="#7-5关系运算" class="headerlink" title="7.5关系运算"></a>7.5关系运算</h2><p>&#x3D;&#x3D;   !&#x3D;    &gt;    &lt;    &gt;&#x3D;    &lt;&#x3D;</p><p>注：”&#x3D;&#x3D;”表示运算符左右两侧是否相等</p><p>a &#x3D;&#x3D; 0和 a &#x3D; 0区别</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">请填写bool<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">,</span> 指针变量 与“零值”比较的<span class="token keyword">if</span>语句。 bool a<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">int</span> var <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>var <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">float</span> a <span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">0.000001</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token number">0.000001</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token operator">*</span>var；<span class="token keyword">if</span><span class="token punctuation">(</span>var <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="7-6位运算"><a href="#7-6位运算" class="headerlink" title="7.6位运算"></a>7.6位运算</h2><p>位运算是以二进制形式运行并且是以补码形式运算<br>&amp;   与0得0<br>|    或1置1<br>^    相同为0，不同为1<br>~   1变0，0变1（包含符号位）<br>&lt;&lt;  左移右侧补0</p><ul><li>正数右移左侧补0，负数右移左侧补1</li><li>例：定义变量a为1234，将其2~4位数输出</li></ul><h2 id="7-7逗号运算"><a href="#7-7逗号运算" class="headerlink" title="7.7逗号运算"></a>7.7逗号运算</h2><p>按照序列编号进行计算</p><p>若没有括号，则取表达式最左侧的运算结果</p><p>若有括号，则取表达式最右侧的结果，其它部分也均参与运算</p><h2 id="7-8三目运算"><a href="#7-8三目运算" class="headerlink" title="7.8三目运算"></a>7.8三目运算</h2><p>格式：</p><p>表达式1？表达式2：表达式3；</p><p>注：若表达式1成立，则执行表达式2，否则执行表达式3</p><h2 id="7-9sizeof运算："><a href="#7-9sizeof运算：" class="headerlink" title="7.9sizeof运算：**"></a>7.9sizeof运算：**</h2><p>计算对象在内存上所占空间大小，单位为字节</p><p>格式：sizeof(被计算对象)；</p><p>注：①被计算对象可以是常量、变量、数据类型、数组、字符串、表达式等</p><p>②计算时需要考虑操作系统</p><p>③无论被计算的对象是否有值，都可以计算</p><h2 id="7-10sizeof和strlen区别"><a href="#7-10sizeof和strlen区别" class="headerlink" title="7.10sizeof和strlen区别"></a>7.10sizeof和strlen区别</h2><p>1、sizeof是关键字，strlen是函数<br>2、sizeof计算的是括号中的数据类型，常量，变量或者数组再内存所占空间大小，strlen计算的是字符串中字符个数，不包括\0<br>3、sizeof计算字符数组大小是，无论数组中有无字符，值都是数组大小，strlen计算是，字符数组中没有字符的话，值为0</p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="/images/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.bmp"></p><h1 id="8、输入与输出"><a href="#8、输入与输出" class="headerlink" title="8、输入与输出"></a>8、输入与输出</h1><h2 id="8-1scanf-x2F-printf"><a href="#8-1scanf-x2F-printf" class="headerlink" title="8.1scanf&#x2F;printf"></a>8.1scanf&#x2F;printf</h2><p>scanf输入字符串包含空格需要<code>scanf（“%[^\n]”,str）</code><br>标准输入：scanf<br>头文件：#include &lt;stdio.h&gt;<br>函数原型：int scanf(const char *format, …);<br>功能：根据format指定的格式输入<br>参数：format表示输入时的参考格式<br>…表示输入数据的存储地址<br>返回值：成功  返回读取的项目个数<br>失败 返回EOF<br>注：<br>scanf函数中format所定义的格式是针对于程序员，且不能出现’\n’;</p><p>标准输出：printf函数<br>头文件：#include &lt;stdio.h&gt;<br>函数原型：int printf(const char *format, …);<br>功能：根据format指定的格式输出<br>参数：format表示输出时的参考格式<br>…输出表<br>返回值：成功  返回输出的个数<br>失败 返回负数</p><p>注：printf函数中format所定义的格式是针对于PC<br>① 格式化输入与输出要求format中格式控制符与输入的地址或输出表，一一对应（类型、顺序、个数）<br>②常见格式控制符：<br>%c 字符型  %hd  short型  %hu 无符号short   %d int型  %u 无符号int   %o 八进制<br>%x  十六进制  %ld long型  %lu 无符号long<br>%f  float   %lf  double  %e 科学计数法  %s 字符串型  %p 地址类型<br>③格式控制符的修饰<br>%md m表示位宽，正数表示右对齐，负数表示左对齐<br>%.nf n表示小数点的位数，满足四舍五入<br>%#o、%#x 带标记打印八进制、十六进制数</p><h2 id="8-2getchar、putchar"><a href="#8-2getchar、putchar" class="headerlink" title="8.2getchar、putchar"></a>8.2getchar、putchar</h2><p>字符输入 getchar<br>头文件：#include &lt;stdio.h&gt;<br>函数原型：int getchar(void);<br>功能：从标准输入流读取下一个字符(主要用于吸收回车)<br>参数：无<br>返回值：成功  返回读取字符的ASCII值<br>失败或文件末尾 返回EOF</p><p>使用函数：<br>(1)如果没有返回值<br>函数名（参数）；<br>(2)如果有返回值<br>根据情况,若不需要返回值，函数名（参数）；<br>根据情况,若需要返回值，返回值类型 变量名 &#x3D; 函数名（参数）；<br>字符输出：putchar<br>头文件：#include &lt;stdio.h&gt;<br>函数原型：int putchar(int c);<br>功能：将c对应的字符输出到标准输出流<br>参数：c表示被输出的字符的ASCII值<br>返回值：成功  返回c对应字符的ASCII值<br>失败 返回EOF</p><h1 id="9、结构语句"><a href="#9、结构语句" class="headerlink" title="9、结构语句"></a>9、结构语句</h1><h2 id="9-1顺序结构"><a href="#9-1顺序结构" class="headerlink" title="9.1顺序结构"></a>9.1顺序结构</h2><p>程序中每一行都需要执行，并且只执行一次<br>选择&#x2F;分支结构：程序从上到下依次执行，当满足某一条件时执行相应的部分代码<br>循环结构：程序从上到下依次执行，当满足某一条件时重复执行某一部分代码，直到不满足该条件，则执行结束</p><p>上下文<br>上下文类似于文章的段落，但在程序开发中，程序顺序执行，段落一般由语句块组成（多条语句完成一段功能），由多个语句块组成上下文，上文相当于数据的出口，同时上文处理后的数据也作为下文处理数据的入口，需要注意的是上文一定要将数据处理完整，然后再传递给下文</p><h2 id="9-2选择结构"><a href="#9-2选择结构" class="headerlink" title="9.2选择结构"></a>9.2选择结构</h2><h3 id="1、基本结构"><a href="#1、基本结构" class="headerlink" title="1、基本结构"></a>1、基本结构</h3><p>if(判断条件)</p><p>​{语句块1；&#x2F;&#x2F;如果判断条件为真，则执行语句块1}<br>else<br>    {语句块2；&#x2F;&#x2F;如果判断条件为假，则执行语句块2}<br>注：可以只有if语句，但是不能只有else语句<br>if与else之间不能添加其它语句<br>else只能与最近if完成配对<br>理论上语句块只有一句，可以不加{}</p><h3 id="2、多分支结构"><a href="#2、多分支结构" class="headerlink" title="2、多分支结构"></a>2、多分支结构</h3><p>if(判断条件1)<br>    {语句块1；&#x2F;&#x2F;如果判断条件1为真，则执行语句块1}<br>else if(判断条件2)<br>    {语句块2；&#x2F;&#x2F;判断条件1为假且判断条件2为真，则执行语句块2}<br>else<br>    {语句块3；&#x2F;&#x2F;判断条件1为假且判断条件2为假，则执行语句块3}</p><h3 id="3、嵌套结构"><a href="#3、嵌套结构" class="headerlink" title="3、嵌套结构"></a>3、嵌套结构</h3><p>if(判断条件1)<br>    {语句块1；&#x2F;&#x2F;如果判断条件1为真，则执行语句块1}<br>else<br>    {<br>        if(判断条件2)<br>            {语句块2；&#x2F;&#x2F;判断条件1为假且判断条件2为真，则执行语句块2}<br>        else<br>            {语句块3；&#x2F;&#x2F;判断条件1为假且判断条件2为假，则执行语句块3}<br>    }</p><h3 id="4、switch语句：（匹配性选择）"><a href="#4、switch语句：（匹配性选择）" class="headerlink" title="4、switch语句：（匹配性选择）"></a>4、switch语句：（匹配性选择）</h3><p>switch(具有确定值的表达式&#x2F;变量)<br>    {<br>    case 选项1：语句块1；break;<br>    case 选项2：语句块2；break;<br>    case 选项3：语句块3；break;<br>    case 选项4：语句块4；break;<br>    …<br>    case 选项n：语句块n；break;<br>    default:语句块n+1;<br>    }<br>注：</p><p>①switch括号中可以是变量也可以是具有确定值的表达式，不能浮点类型<br>②case选项一般是数字或字符<br>③选项之间没有先后顺序之分<br>④每一条语句之后必须添加break，结束本次选择；特殊情况视情况而定</p><h2 id="9-3循环结构"><a href="#9-3循环结构" class="headerlink" title="9.3循环结构"></a>9.3循环结构</h2><p>for循环：<br>格式：<br>1、for(初始条件；边界条件；步长设定)<br>    {循环体}<br>注：初始条件表示循环起始位置<br>边界条件表示循环的结束条件<br>步长设定表示循环每次所跨的步长<br>初始条件可以省略，有可能不执行循环；需要在循环之前赋初值<br>边界条件可以省略，会出现死循环；需要在循环体中添加终止条件<br>步长设定也可以省略，会出现死循环；需要在循环体中添加步长设定<br>for循环中两个分号不能省略<br>2、while循环<br>格式：<br>while(循环条件)<br>    {循环体}<br>3、do…while循环<br>do<br>    {循环体}while(循环条件)；<br>while循环先判断，在执行循环体<br>do循环先执行再判断</p><h3 id="break、continue、return-区别"><a href="#break、continue、return-区别" class="headerlink" title="break、continue、return 区别"></a>break、continue、return 区别</h3><p>break 用于循环体内，跳出循环，即结束当前循环;只能用于循环结构和switch语句中<br>continue 结束本次循环，接着进行下一次循环<br>return 若终止的函数为主函数（main），则程序结束运行，在main函数中可以return 0，-1这种数字，自定义函数中返回标识类的数字必须使用宏替换或枚举代替，方便代码阅读，返回值设计规则，在出错情况下返回值不能出现正确结果范围内的值</p><h2 id="9-4goto-—无条件跳转语句"><a href="#9-4goto-—无条件跳转语句" class="headerlink" title="9.4goto  —无条件跳转语句"></a>9.4goto  —无条件跳转语句</h2><p>基本格式：<br>goto 跳转标记；<br>语句块；<br>跳转标记：<br>注：goto的跳转和语句、程序结构无关，只认跳转标记<br>循环结构<br>格式：<br>跳转标记：<br>语句块；<br>goto 跳转标记；</p><h1 id="10-数组"><a href="#10-数组" class="headerlink" title="10. 数组"></a>10. 数组</h1><h3 id="10-1-定义"><a href="#10-1-定义" class="headerlink" title="10.1 定义"></a>10.1 定义</h3><ol><li><em>一组数据类型相同且连续存储的数据集合</em></li><li><em>由若干个数据类型相同的变量、连续存储组成的一种复合的数据类型，存储到数组中的变量叫数组成员，即数组元素</em></li></ol><h3 id="10-2-性质"><a href="#10-2-性质" class="headerlink" title="10.2 性质"></a>10.2 性质</h3><ul><li>类型一致性</li><li>存储连续性</li><li>访问有序性</li></ul><h3 id="10-3-格式"><a href="#10-3-格式" class="headerlink" title="10.3 格式"></a>10.3 格式</h3><ul><li><p>存储类型  数据类型 数组名[常量表达式]；</p></li><li><p>存储类型：表示数据在内存上什么位置存储</p></li><li><p>数据类型：表示数组元素的数据类型，可以是基本数据类型，也可以是构造数据类型</p></li><li><p>数组名：表示数组空间名称，也表示数组的起始地址，符合标识符规则</p></li><li><p>常量表达式：数组元素个数，必是常量，也可以宏定义</p><p>例:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul><h3 id="10-4-数组大小"><a href="#10-4-数组大小" class="headerlink" title="10.4 数组大小"></a>10.4 数组大小</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>数组名<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>单个数组元素<span class="token punctuation">)</span> <span class="token operator">=</span> 数组元素个数<span class="token keyword">sizeof</span><span class="token punctuation">(</span>数组名<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>数组的数据类型<span class="token punctuation">)</span> <span class="token operator">=</span> 数组元素个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="10-5-数组初始化"><a href="#10-5-数组初始化" class="headerlink" title="10.5 数组初始化"></a>10.5 数组初始化</h3><h4 id="10-5-1-省略初始化"><a href="#10-5-1-省略初始化" class="headerlink" title="10.5.1 省略初始化"></a>10.5.1 省略初始化</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 省略初始化必须有初始值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="10-5-2-完全初始化"><a href="#10-5-2-完全初始化" class="headerlink" title="10.5.2 完全初始化"></a>10.5.2 完全初始化</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="10-5-3-不完全初始化"><a href="#10-5-3-不完全初始化" class="headerlink" title="10.5.3 不完全初始化"></a>10.5.3 不完全初始化</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 总共5个元素，第1个，第2个元素被初始化，剩下元素的值为0</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 总共5个元素，每个元素初始值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="10-6-数组元素调用"><a href="#10-6-数组元素调用" class="headerlink" title="10.6 数组元素调用"></a>10.6 数组元素调用</h3><p>数组名[数组下标];</p><p><em>使用数组元素时，注意下标从0开始</em></p><hr><h3 id="10-7-自定义函数封装"><a href="#10-7-自定义函数封装" class="headerlink" title="10.7 自定义函数封装"></a>10.7 自定义函数封装</h3><h4 id="10-7-1-strlen"><a href="#10-7-1-strlen" class="headerlink" title="10.7.1 strlen"></a>10.7.1 strlen</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//函数功能：模拟实现strlen函数</span><span class="token comment">//参数：需要计算的字符串的起始地址</span><span class="token comment">//返回值：返回字符串中\0字符之前的字符个数</span><span class="token keyword">int</span> <span class="token function">mystrlen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"12366545+abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token function">mystrlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-2-strcpy"><a href="#10-7-2-strcpy" class="headerlink" title="10.7.2 strcpy"></a>10.7.2 strcpy</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//Desc:将src指向的字符串复制到dest指向的缓存区（逐字符覆盖）</span><span class="token comment">//Param1:表示第一个字符串</span><span class="token comment">//Param2:表示第二个字符串</span><span class="token comment">//Retval:返回   复制后的字符串的起始地址</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> d<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token operator">=</span><span class="token function">fun</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-3-strncpy"><a href="#10-7-3-strncpy" class="headerlink" title="10.7.3 strncpy"></a>10.7.3 strncpy</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//Desc:字符串复制</span><span class="token comment">//Param1:接收字符串复制后的首地址</span><span class="token comment">//Param2:表示需要复制的字符串首地址</span><span class="token comment">//Param3:最对复制前n项</span><span class="token comment">//Retval:成功返回复制后的字符串的首地址</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">mystrncpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>src<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input dest:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input src:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input n:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mystrncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>src<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-4-strcat"><a href="#10-7-4-strcat" class="headerlink" title="10.7.4 strcat"></a>10.7.4 strcat</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//Desc:字符串拼接</span><span class="token comment">//Param1:原字符串首地址</span><span class="token comment">//Param2:需要拼接的字符串首地址</span><span class="token comment">//Retval:返回拼接后新字符串的首地址</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">mystrcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>   <span class="token comment">//while(str1[i++] != '\0')</span><span class="token punctuation">&#123;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token comment">//while((str1[i++] = str2[j++]) != '\0') </span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input dest:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input src:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mystrcat</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-5-strncat"><a href="#10-7-5-strncat" class="headerlink" title="10.7.5 strncat"></a>10.7.5 strncat</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">mystrncat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input str1:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input str2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input m:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mystrncat</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-6-strcmp"><a href="#10-7-6-strcmp" class="headerlink" title="10.7.6 strcmp"></a>10.7.6 strcmp</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token keyword">int</span> <span class="token function">mystrcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s1<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token operator">||</span><span class="token operator">*</span>s2<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>s1<span class="token operator">-</span><span class="token operator">*</span>s2<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>s1<span class="token operator">-</span><span class="token operator">*</span>s2<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s1<span class="token operator">++</span><span class="token punctuation">;</span>s2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>m<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>n<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">mystrcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-7-strncmp"><a href="#10-7-7-strncmp" class="headerlink" title="10.7.7 strncmp"></a>10.7.7 strncmp</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//Desc:字符串复制</span><span class="token comment">//Param1:接收字符串复制后的首地址</span><span class="token comment">//Param2:表示需要复制的字符串首地址</span><span class="token comment">//Param3:最对复制前n项</span><span class="token comment">//Retval:成功返回复制后的字符串的首地址</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">mystrncpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dest<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>src<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input dest:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input src:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input n:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mystrncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>src<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-8-strstr"><a href="#10-7-8-strstr" class="headerlink" title="10.7.8 strstr"></a>10.7.8 strstr</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">mystrstr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> dest <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>tmp_src <span class="token operator">=</span> src<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>dest <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>dest <span class="token operator">==</span> <span class="token operator">*</span>tmp_src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp_src <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>dest <span class="token operator">!=</span> <span class="token operator">*</span>tmp_src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dest<span class="token operator">++</span><span class="token punctuation">;</span>tmp_src<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dest<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp_src <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tmp_src <span class="token operator">=</span> src<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dest<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"sdfhrkashrksdfhrksdfds"</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hrks"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">mystrstr</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-9-itoa"><a href="#10-7-9-itoa" class="headerlink" title="10.7.9 itoa"></a>10.7.9 itoa</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//Desc:将整形数转换为字符串输出</span><span class="token comment">//Param1:表示第需要转换的整形</span><span class="token comment">//Param2:</span><span class="token comment">//Retval:返回转换后的字符串</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>p<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'-'</span><span class="token punctuation">;</span>num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span>num<span class="token operator">=</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p<span class="token operator">=</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>        l<span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span>  <span class="token keyword">char</span> f<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-10-atoi"><a href="#10-7-10-atoi" class="headerlink" title="10.7.10 atoi"></a>10.7.10 atoi</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">myatoi</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token operator">||</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token char">'0'</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>num<span class="token operator">=</span>num<span class="token operator">*</span>j<span class="token punctuation">;</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gets(str);</span><span class="token comment">//char str[30]="1231adaf13q";</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token function">myatoi</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-11-memset"><a href="#10-7-11-memset" class="headerlink" title="10.7.11 memset"></a>10.7.11 memset</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mymemset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mymemset(&amp;a,1,1);</span><span class="token comment">//mymemset(&amp;a,1,2);</span><span class="token comment">//mymemset(&amp;a,1,3);</span><span class="token function">mymemset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*char *tmp = (char *)&amp;a;int i = 0;for(i = 0;i &lt; 4;i++)&#123;printf("%p : %#x\n",tmp,*tmp);tmp++;&#125;*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+++++a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><hr><h4 id="10-7-12-memcpy"><a href="#10-7-12-memcpy" class="headerlink" title="10.7.12 memcpy"></a>10.7.12 memcpy</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">mymemcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> dest <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">;</span>q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d,b = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mymemcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"++++a = %d,b = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> brr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>brr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mymemcpy</span><span class="token punctuation">(</span>brr<span class="token punctuation">,</span>arr<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"++++++%d "</span><span class="token punctuation">,</span>brr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="10-8-必须完成的函数封装"><a href="#10-8-必须完成的函数封装" class="headerlink" title="10.8 必须完成的函数封装"></a>10.8 必须完成的函数封装</h3><h4 id="10-8-1-冒泡排序"><a href="#10-8-1-冒泡排序" class="headerlink" title="10.8.1 冒泡排序"></a>10.8.1 冒泡排序</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">/**arr 数组起始地址n 数组元素**/</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-2-插入排序"><a href="#10-8-2-插入排序" class="headerlink" title="10.8.2 插入排序"></a>10.8.2 插入排序</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> arr<span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//未排序序列中第一个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//在已排序序列中找到num应该插入的位置</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// printf("%d\n", i); // i是应该插入的位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">//腾出i的位置</span>        <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">//插入</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-3-选择排序"><a href="#10-8-3-选择排序" class="headerlink" title="10.8.3 选择排序"></a>10.8.3 选择排序</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token class-name">max_t</span><span class="token punctuation">,</span>tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">max_t</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token class-name">max_t</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token class-name">max_t</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token class-name">max_t</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token class-name">max_t</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token class-name">max_t</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-4-二分查找"><a href="#10-8-4-二分查找" class="headerlink" title="10.8.4 二分查找"></a>10.8.4 二分查找</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>high <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-5-斐波那契数列"><a href="#10-8-5-斐波那契数列" class="headerlink" title="10.8.5 斐波那契数列"></a>10.8.5 斐波那契数列</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">feibo</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> size <span class="token operator">||</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"传参错误!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最多只能输出前1000项!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要打印的项数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">feibo</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>N<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-6-杨辉三角"><a href="#10-8-6-杨辉三角" class="headerlink" title="10.8.6 杨辉三角"></a>10.8.6 杨辉三角</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token comment">//Desc:打印杨辉三角</span><span class="token comment">//Param1:需要打印的数组的行数</span><span class="token comment">//Param2:需要打印的数组的列数</span><span class="token comment">//Param3:需要打印的数组的首行行地址</span><span class="token comment">//Param4:需要打印的数组的行数</span><span class="token comment">//Retval:无</span><span class="token keyword">void</span> <span class="token function">yanghui</span><span class="token punctuation">(</span><span class="token keyword">int</span> size1<span class="token punctuation">,</span><span class="token keyword">int</span> size2<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span>size2<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token operator">&amp;&amp;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-4d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入需要打印的项行数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">yanghui</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>N<span class="token punctuation">,</span>arr<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-7-判断素数"><a href="#10-8-7-判断素数" class="headerlink" title="10.8.7 判断素数"></a>10.8.7 判断素数</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//封装函数-判断素数函数</span><span class="token comment">//函数格式：int  prime_num(int num)</span><span class="token comment">//函数功能：判断一个数是否为素数</span><span class="token comment">//参数：需要判断的数据</span><span class="token comment">//返回值：-1 不是素数</span><span class="token comment">//        0  是素数</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span>  <span class="token function">prime_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"被测数据输入错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> num<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不是素数!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是素数!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">prime_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="10-8-8-最小公倍数与最大公约数"><a href="#10-8-8-最小公倍数与最大公约数" class="headerlink" title="10.8.8 最小公倍数与最大公约数"></a>10.8.8 最小公倍数与最大公约数</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//Desc:求两个数的最大公约数与最小共倍数</span><span class="token comment">//Param1:表示第一个整型数</span><span class="token comment">//Param2:表示第二个整型数</span><span class="token comment">//Retval:无</span><span class="token comment">//       </span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>q<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    m<span class="token operator">=</span>x<span class="token punctuation">;</span>x<span class="token operator">=</span>y<span class="token punctuation">;</span>y<span class="token operator">=</span>m<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>     m<span class="token operator">=</span>x<span class="token punctuation">;</span>   n<span class="token operator">=</span>y<span class="token punctuation">;</span>   q<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>    m<span class="token operator">=</span>n<span class="token punctuation">;</span>n<span class="token operator">=</span>q<span class="token punctuation">;</span>q<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  m<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有最大公约数，最小公倍数为：%d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大公约数为：%d，最小公倍数为：%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input a and b:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="11-指针"><a href="#11-指针" class="headerlink" title="11.指针"></a>11.指针</h1><h3 id="11-1定义"><a href="#11-1定义" class="headerlink" title="11.1定义"></a>11.1定义</h3><p>​       在计算机内部存储（内存）中，为了存储数据将内存分为每一个字节单元，并且给每一个数据单元赋予一个独一无二的编号，该编号即称为地址。</p><p>​       地址即指针。</p><p>​       地址作为一种数据类型，将地址在内存中保存，该空间即为地址变量，又称为指针变量，该空间名称即为指针变量名。</p><p>​       ①指针就是地址</p><p>​       ②指针变量存放地址的变量</p><p>​       ③指针的数据类型表示所指向的内存操作方式和范围。</p><h3 id="11-2初始化"><a href="#11-2初始化" class="headerlink" title="11.2初始化"></a>11.2初始化</h3><p>野指针：指向内存无效</p><h5 id="a-造成野指针的原因"><a href="#a-造成野指针的原因" class="headerlink" title="a.造成野指针的原因"></a>a.造成野指针的原因</h5><p>​①指针变量未初始化</p><p>​②指向malloc申请内存的指针，在free释放内存后</p><p>​③指向函数返回的局部变量地址</p><h5 id="b-野指针后果"><a href="#b-野指针后果" class="headerlink" title="b.野指针后果"></a>b.野指针后果</h5><p>​①指向不可访问的地址  </p><p>​危害：造成段错误</p><p>​②指向一个可用的，但是没有明确意义的空间</p><p>​危害：程序可以正确运行，事实上存在问题，所以就掩盖了程序上的错误</p><p>​③指向一个可用的，而且正在被使用的空间</p><p>​危害：通常会造成程序崩溃，或者数据被损坏</p><h5 id="c-如何避免野指针"><a href="#c-如何避免野指针" class="headerlink" title="c.如何避免野指针"></a>c.如何避免野指针</h5><p>​①定义一个指针变量时一定要进行初始化</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//初始化为NULL(0)</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//初始化为一个有效的内存地址</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//初始化为NULL(0)，可以赋值，但要指向一个有效的内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>​②动态开辟的内存空间使用完free后将对应的指针置位NULL</p><p>​③不在函数中返回栈空间的指针和引用</p><p>​④在使用时对指针的合法性的判断</p><h3 id="11-3修饰"><a href="#11-3修饰" class="headerlink" title="11.3修饰"></a>11.3修饰</h3><p>const修饰常量化处理</p><p>①const修饰指针—&gt;常指针const int *p &#x3D;&amp;a;  指针常量指向可以修改，但指针指向的值不可以改变</p><p>②const修饰常量&gt;指针的常量化int* cosnt p&#x3D;&amp;a;常量指针指向的值可以修改，但指针指向不可以改变</p><p>③const即修饰指针，又修饰常量  const int * const p&#x3D;&amp;a;指针指向和指向的值都不可以修改</p><p>仅仅限制通过指针间接修改的方式，通过变量名直接修改不受限制</p><p>const修饰指针一般在函数传参时常用(对传入的数据进行保护)</p><h3 id="11-4指针大小"><a href="#11-4指针大小" class="headerlink" title="11.4指针大小"></a>11.4指针大小</h3><p>只与操作系统有关</p><p>​①在32位操作系统下，默认指针大小4字节</p><p>​②在64位操作系统下，默认指针大小8字节</p><h3 id="11-5指针数组"><a href="#11-5指针数组" class="headerlink" title="11.5指针数组"></a>11.5指针数组</h3><p>定义：数组元素为指针的数组</p><p>格式：存储类型数据类型*数组名[数组元素个数]</p><p>​①遵循一维数组所有规则</p><p>​②数组元素的数据类型数据类型 *</p><h5 id="a-保存一维数组地址"><a href="#a-保存一维数组地址" class="headerlink" title="a.保存一维数组地址"></a>a.保存一维数组地址</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="b-保存二维数组地址"><a href="#b-保存二维数组地址" class="headerlink" title="b.保存二维数组地址"></a>b.保存二维数组地址</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//将二维数组每一行看成一个新类型（int[3]      int[3]a[2]）</span><span class="token comment">//行地址：a  a+1=>int[3]*</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//保存的是行首元素地址，所以大小为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="c-保存字符串（字符串仍然在常量区，因此只能使用字符串不能修改字符串）"><a href="#c-保存字符串（字符串仍然在常量区，因此只能使用字符串不能修改字符串）" class="headerlink" title="c.保存字符串（字符串仍然在常量区，因此只能使用字符串不能修改字符串）"></a>c.保存字符串（字符串仍然在常量区，因此只能使用字符串不能修改字符串）</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>q<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>z<span class="token operator">=</span><span class="token string">"yes"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>z<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"hello world"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"yes"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//a[0]表示h字符的地址，a[1]表示字符1的起始地址</span><span class="token comment">//a[2]表示y字符的地址  ---->char *</span><span class="token comment">//a[0]+6---->w字符的地址  *(a[0]+6)---> a[0][6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="11-6数组指针"><a href="#11-6数组指针" class="headerlink" title="11.6数组指针"></a>11.6数组指针</h3><p>定义：表示可以操作整个数组空间的指针（指向数组的指针）</p><p>格式：</p><p>​   数据类型 (*指针变量名)[数组元素个数]</p><p>指针数据类型：数据类型(*)[数组元素个数]</p><p>该指针操纵内存大小：sizeof(数据类型)*数组元素个数</p><h5 id="①一维数组指针"><a href="#①一维数组指针" class="headerlink" title="①一维数组指针"></a>①一维数组指针</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//int[3] a(相当于把int[3]看能新的数据类型)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> INT<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> a <span class="token operator">==</span> INT <span class="token function">a</span><span class="token punctuation">(</span>INT型变量<span class="token punctuation">)</span>INT <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">(</span>INT型指针<span class="token punctuation">)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a（最终结果）<span class="token comment">//指向数组整体地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h5 id="②二维数组指针"><a href="#②二维数组指针" class="headerlink" title="②二维数组指针"></a>②二维数组指针</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//将一行看成一个元素，新类型int[3]</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> INTINT a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>INT<span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//指向数组首行行地址，方括号里为列数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="11-7函数指针"><a href="#11-7函数指针" class="headerlink" title="11.7函数指针"></a>11.7函数指针</h3><p>定义：指向函数的指针</p><p>格式：返回值类型  (*指针名)(形参列表);</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>  <span class="token operator">==</span><span class="token operator">></span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span>  <span class="token operator">==</span><span class="token operator">></span>INTINT <span class="token operator">*</span>p <span class="token operator">=</span> fun<span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>p <span class="token operator">=</span> fun<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> fun<span class="token comment">//函数指针</span><span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>①该指针的类型返回值类型(*)(形参列表)；</p><p>②形参列表不需要形参名</p><p>回调</p><h3 id="11-8指针函数"><a href="#11-8指针函数" class="headerlink" title="11.8指针函数"></a>11.8指针函数</h3><p>定义：返回值类型为指针的函数</p><p>格式：</p><p>​数据类型  *函数名(形参列表)；</p><p>​返回值类型：数据类型*</p><h3 id="11-9多级指针"><a href="#11-9多级指针" class="headerlink" title="11.9多级指针"></a>11.9多级指针</h3><p>一般二级指针用的较多，多级指针最终需要指向一块有效内存</p><p>二级：二级带一级</p><p>通过函数参数形式带回一块分配好的内存，函数的返回值为执行此函数成功或失败。</p><h5 id="void"><a href="#void" class="headerlink" title="void*"></a>void*</h5><p>使用目的：void 类型指针常作为函数入参使用，注意，在使用时需要强制转换，明确使用方式，</p><p>​              同时还需要传递void类型指针所指向的内存大小，防止越界。</p><p>(明确内存的操作方式和范围)</p><p>​       void类型指针使函数更加通用，例如read函数参数，系统接口不需要考虑具体数据类型</p><p>​       void类型变量不能定义。</p><p>​       void类型作为函数返回值，表示无返回值</p><h3 id="11-10大小端"><a href="#11-10大小端" class="headerlink" title="11.10大小端"></a>11.10大小端</h3><p>大小端指的是数据在内存中的存储顺序（每一个字节数据与每一个字节地址的关系）</p><p>大端存储：低地址存放高字节，高地址存放低字节</p><p>小端存储：低地址存放低字节，高地址存放高字节</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">short</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//01（高字节0，低字节1）</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//低地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//高地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="12、函数"><a href="#12、函数" class="headerlink" title="12、函数"></a>12、函数</h1><h3 id="12-1-函数传参"><a href="#12-1-函数传参" class="headerlink" title="12.1 函数传参"></a>12.1 函数传参</h3><h4 id="1-1-值传参"><a href="#1-1-值传参" class="headerlink" title="1.1 值传参"></a>1.1 值传参</h4><p>传入函数的是实际参数的值，而非实际参数本身，因此形参相当于是实参的复制体，所以形参发生变化，并不影响实参。</p><h4 id="1-2-地址传参"><a href="#1-2-地址传参" class="headerlink" title="1.2 地址传参"></a>1.2 地址传参</h4><p>传入函数的是实际参数的地址，相当于将实际参数本身传入函数，因此形参发生变化，则会直接作用于实参。</p><p><img src="/images/%E5%9C%B0%E5%9D%80%E4%BC%A0%E5%8F%82.bmp"></p><h4 id="1-3-数组传参"><a href="#1-3-数组传参" class="headerlink" title="1.3 数组传参"></a>1.3 数组传参</h4><h5 id="1-3-1-一维数组："><a href="#1-3-1-一维数组：" class="headerlink" title="1.3.1 一维数组："></a>1.3.1 一维数组：</h5><p><code>int arr[5] = &#123;-4,7,8,0,5&#125;;</code></p><p><code>void fun(int a[],int size)</code>&#x2F;&#x2F;使用数组类型</p><p><code>fun(arr,5);  a[i];</code></p><p><code>void fun(int *p,int size)</code>&#x2F;&#x2F;使用一级指针</p><p><code>fun(arr,5); p[i];</code></p><p><code>void fun(int size,int (*p)[size]);</code>&#x2F;&#x2F;使用一维数组指针</p><p><code>fun(5,&amp;arr); (*p)[i];</code></p><h5 id="1-3-2-二维数组："><a href="#1-3-2-二维数组：" class="headerlink" title="1.3.2 二维数组："></a>1.3.2 二维数组：</h5><p><code>int arr[2][3] = &#123;0&#125;;</code></p><p><code>void fun(int m ,int n,int a[][n]);</code>&#x2F;&#x2F;使用数组类型</p><p><code>fun(2,3,arr); a[i][j];</code></p><p><code>void fun(int m,int n,int (*p)[n]);</code>&#x2F;&#x2F;使用一维数组指针</p><p><code>fun(2,3,arr); p[i][j];</code></p><p><code>void fun(int m,int n,int(*p)[m][n])</code>;&#x2F;&#x2F;使用二维数组指针</p><p><code>fun(2,3,&amp;arr);(*p)[i][j];</code></p><p>老师加的：</p><p><code>void fun1(int *p,int m,int n);  fun1(&amp;arr[0][0],3,4)</code>;</p><h2 id="12-2递归函数"><a href="#12-2递归函数" class="headerlink" title="12.2递归函数"></a>12.2递归函数</h2><p>定义：在函数调用中，自己调自己的函数</p><p>递推阶段：从函数调用开始，逐层调用，直到递推返回条件的过程</p><p>回归阶段：从递推返回条件，逐层返回到调用位置，直到退出最后一层调用的过程</p><p><img src="/images/%E9%80%92%E5%BD%92-1676100442580.bmp">                                  </p><p>注：①一定需要注意递归函数的回归条件</p><p>​       ②递推层次不宜太深</p><p>应用：二叉树</p><p>代码：</p><h2 id="12-3回调函数"><a href="#12-3回调函数" class="headerlink" title="12.3回调函数"></a>12.3回调函数</h2><p>定义：函数实现已经生成，函数的调用是在回调时刻到达启动。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n\r"</span><span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> m <span class="token operator">></span> n <span class="token punctuation">)</span>  <span class="token comment">//回调时刻</span>    <span class="token punctuation">&#123;</span>        <span class="token function">p</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注：在回调时刻到达时，使用函数指针调用函数。</p><h1 id="13、结构体"><a href="#13、结构体" class="headerlink" title="13、结构体"></a>13、结构体</h1><h2 id="13-1定义格式"><a href="#13-1定义格式" class="headerlink" title="13.1定义格式"></a>13.1定义格式</h2><p>不同数据类型的变量有机的结合到一起形成一个整体</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">name</span><span class="token comment">//结构体类型名</span><span class="token punctuation">&#123;</span>  typename  m_name  <span class="token comment">//类型名+结构体成员名；</span><span class="token punctuation">&#125;</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="13-2存储原则"><a href="#13-2存储原则" class="headerlink" title="13.2存储原则"></a>13.2存储原则</h2><ul><li><p>分双不分单，考虑字节对齐，避免浪费内存节</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token comment">//4</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment">//4</span>    <span class="token keyword">short</span> d<span class="token punctuation">;</span><span class="token comment">//8</span>    <span class="token keyword">double</span> c<span class="token punctuation">;</span><span class="token comment">//8</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Test</span> t<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Test</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//24</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eeeeeeeeee62FEee</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eeeee0000062FE04</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//62FE98printf("%p\n",&amp;(t.c))FE10</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​</p></li></ul><h2 id="13-3结构体指针"><a href="#13-3结构体指针" class="headerlink" title="13.3结构体指针"></a>13.3结构体指针</h2><ul><li><p>定义：存储类型数据类型 * 指针名；</p></li><li><p>指针调用：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">name</span><span class="token comment">//结构体类型名</span><span class="token punctuation">&#123;</span>  typename  m_name  <span class="token comment">//类型名+结构体成员名；</span><span class="token punctuation">&#125;</span>；<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">name</span><span class="token operator">*</span> p<span class="token punctuation">;</span>    p<span class="token operator">-></span>m_name<span class="token punctuation">;</span><span class="token comment">//指针名->成员名</span>    <span class="token operator">*</span>p<span class="token punctuation">.</span>m_mane<span class="token punctuation">;</span><span class="token comment">//（*指针名).成员名</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul><h2 id="13-4结构体数组"><a href="#13-4结构体数组" class="headerlink" title="13.4结构体数组"></a>13.4结构体数组</h2><ul><li><p>定义：结构体类型名  数组名[元素个数]</p><p><img src="/images/%E7%BB%93%E6%9E%84%E4%BD%93%E6%95%B0%E7%BB%84.png"></p></li></ul><h2 id="13-5结构体与类"><a href="#13-5结构体与类" class="headerlink" title="13.5结构体与类"></a>13.5结构体与类</h2><p>所谓结构体，就是一种复合数据类型，用于描述复杂的存储结构的类型。C语言中结构体内存储的是“成员变量”，如果想要操作结构体中的变量，需要自己定义额外的函数来操作。这样看来结构体变量和函数之间是没有关系的，但是我们想要实现的是，对应的变量被对应的函数所操作。即需要将数据和操作数据的函数相结合，形成逻辑上统一的整体。因此在C++语言中，基于结构体产生了“类”这一存储结构，将数据与操作数据的函数进行结合，实现了数据的封装功能。</p><p>注：C++中结构体和类两种存储结构，几乎一模一样，除了访问权限。结构体默认的访问权限为公共的，而类默认的访问权限为私有的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#if 0struct Clock&#123;int hour;int minute;int second;void showTime()&#123;cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;&#125;void setTime(int h, int m, int s)&#123;if (h &gt;&#x3D; 0 &amp;&amp; h &lt; 24 &amp;&amp; m &gt;&#x3D; 0 &amp;&amp; m &lt; 60 &amp;&amp; s &gt;&#x3D; 0 &amp;&amp; s &lt; 60)&#123;hour &#x3D; h;minute &#x3D; m;second &#x3D; s;&#125;else&#123;hour &#x3D; minute &#x3D; second &#x3D; 0;cout &lt;&lt; &quot;时间设置错误&quot; &lt;&lt; endl;&#125;&#125;&#125;;int main()&#123;struct Clock myClock;myClock.setTime(10, 26, 59);myClock.showTime();Clock myClock1;myClock1.setTime(10, 27, 59);myClock1.showTime();return 0;&#125;#endif#if 0class Clock&#123;int hour;int minute;int second;void showTime()&#123;cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;&#125;void setTime(int h, int m, int s)&#123;if (h &gt;&#x3D; 0 &amp;&amp; h &lt; 24 &amp;&amp; m &gt;&#x3D; 0 &amp;&amp; m &lt; 60 &amp;&amp; s &gt;&#x3D; 0 &amp;&amp; s &lt; 60)&#123;hour &#x3D; h;minute &#x3D; m;second &#x3D; s;&#125;else&#123;hour &#x3D; minute &#x3D; second &#x3D; 0;cout &lt;&lt; &quot;时间设置错误&quot; &lt;&lt; endl;&#125;&#125;&#125;;int main()&#123;struct Clock myClock;myClock.setTime(10, 26, 59);myClock.showTime();Clock myClock1;myClock1.setTime(10, 27, 59);myClock1.showTime();return 0;&#125;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="14、其他"><a href="#14、其他" class="headerlink" title="14、其他"></a>14、其他</h1><h2 id="14-1volatile"><a href="#14-1volatile" class="headerlink" title="14.1volatile"></a>14.1volatile</h2><p>防止编译器优化，arm汇编会看见现象。</p><p>​        一个定义为 volatile 的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。下面是 volatile 变量的几个例子:</p><ul><li>并行设备的硬件寄存器 (如: 状态寄存器) (内存屏障,比如直接操作设备，但是由于需要提高速度，会直接从缓存中读取，造成操作不同步，加上 volatile，则会直接从内存读取，直接操作设备)。</li><li>一个中断服务子程序中会访问到的非自动变量(Non-automatic variables) (内存屏障)。</li><li>多线程应用中被几人任务共享的变量(防止被编译器优化,例如 inta &#x3D; 1;while(a)while(1)加 volatile 修饰，则是一直是 while(a))。</li></ul><h2 id="14-2-lt-gt-与””的区别"><a href="#14-2-lt-gt-与””的区别" class="headerlink" title="14.2&lt;&gt;与””的区别"></a>14.2&lt;&gt;与””的区别</h2><ul><li>系统头文件使用&lt;&gt;,自定义头文件使用””。</li><li>系统头文件保存在系统头文件位置处，自定义头文件一般保存在当前目录，若其他目录下需要添加路径。</li><li>“”首先在当前目录下寻找，如果找不到，再到系统目录中寻找。&lt;&gt;先去系统目录中找头文件，如果没有在到当前目录下找。条件编译。</li></ul><h2 id="14-3条件编译"><a href="#14-3条件编译" class="headerlink" title="14.3条件编译"></a>14.3条件编译</h2><ul><li><p><code>#ifndef  </code>防止头文件重复编译</p></li><li><figure><div class="code-wrapper"><pre><code class="c">#if max#endif//条件编译，如果max大于0编译，小于0不编译</code></pre></div></figure></li></ul><h2 id="14-4typedef-与-宏"><a href="#14-4typedef-与-宏" class="headerlink" title="14.4typedef 与 宏"></a>14.4typedef 与 宏</h2><p>原理不同：#define是c语言中定义的语法，是预处理指令，不加分号；typedef是关键字，typedef重命名属于语句，所以要加分号。</p><p>功能不同：#define可以替换变量、常量、表达式、函数等，还能替换数据类型，但是替换数据类型之是单纯的替换；typedef是定义新数据类型。</p><p>作用域不同：#define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而typedef有自己的作用域。</p><h2 id="14-5在函数中返回局部变量地址（延长变量的生命周期）"><a href="#14-5在函数中返回局部变量地址（延长变量的生命周期）" class="headerlink" title="14.5在函数中返回局部变量地址（延长变量的生命周期）"></a>14.5在函数中返回局部变量地址（延长变量的生命周期）</h2><p>若返回局部变量地址，因为局部变量会随着局部区域的调用完毕而释放，所以局部变量地址将会消失。为了解决这个问题，需要考虑的第一要素就是如何保证局部变量空间不会被释放，即延长变量的生命周期。</p><h3 id="方法一：将局部变量变成全局变量"><a href="#方法一：将局部变量变成全局变量" class="headerlink" title="方法一：将局部变量变成全局变量"></a>方法一：将局部变量变成全局变量</h3><p>将变量空间放到堆区 malloc函数、memset函数、free函数。</p><p>①malloc函数：</p><p>头文件：#include &lt;stdlib.h&gt;</p><p>函数原型：void *malloc(size_t size);</p><p>功能：分配size字节的空间，返回指针指向所分配好的空间</p><p>参数：size表示分配空间大小 单位：字节</p><p>返回值：成功 返回分配的空间的指针;失败 返回NULL</p><p>注：malloc函数申请的空间未初始化，若申请的空间大小为０字节不能表示失败。</p><p>②memset函数：</p><p>头文件：#include &lt;string.h&gt;</p><p>函数原型：void *memset(void *s, int c, size_tn);</p><p>功能：将ｓ指向的缓存区的前ｎ个字节使用ｃ填充</p><p>参数：ｓ表示指向缓存区的地址</p><p>ｃ表示填充的数据</p><p>ｎ表示被填充的空间大小　单位：字节</p><p>返回值：成功 返回被填充的缓存区的起始地址</p><p>③free函数：</p><p>头文件：#include &lt;stdlib.h&gt;</p><p>函数原型：void free(void *ptr);</p><p>功能：释放由ptr指向的内存空间（该空间必须由malloc(), calloc() 、realloc()申请）</p><p>参数：ptr表示被释放的空间的指针</p><p>返回值：无</p><p>注：free函数释放后，不能再次释放</p><h3 id="方法二：-将变量放到静态区（由static修饰的变量会放在静态区）"><a href="#方法二：-将变量放到静态区（由static修饰的变量会放在静态区）" class="headerlink" title="方法二： 将变量放到静态区（由static修饰的变量会放在静态区）"></a>方法二： 将变量放到静态区（由static修饰的变量会放在静态区）</h3><p>特点：</p><p>①static可以修饰函数以及变量</p><p>②static修饰函数可以限制该函数被外部调用，static修饰变量也可以限制其被外部调用</p><p>③static修饰的变量只初始化一次，以后使用的都是上一次的结果</p><p>④static修饰的变量未初始化，由系统赋予确定值0</p><p>⑤static修饰的变量可以延长变量的生命周期</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针数组与数组指针</title>
      <link href="/2022/09/08/%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E4%B8%8E%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88/"/>
      <url>/2022/09/08/%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E4%B8%8E%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="指针数组与数组指针"><a href="#指针数组与数组指针" class="headerlink" title="指针数组与数组指针"></a>指针数组与数组指针</h1><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">数组元素为指针的数组</code></pre></div></figure><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">存储类型 数据类型 * 数组名[数组元素个数]</code></pre></div></figure><h4 id="指针数组保存变量地址"><a href="#指针数组保存变量地址" class="headerlink" title="指针数组保存变量地址"></a>指针数组保存变量地址</h4><figure><div class="code-wrapper"><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D; 3,b &#x3D; 4,c &#x3D; 7int *arr[3] &#x3D; &#123;&amp;a,&amp;b,&amp;c&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h4 id="指针数组保存一维数组地址"><a href="#指针数组保存一维数组地址" class="headerlink" title="指针数组保存一维数组地址"></a>指针数组保存一维数组地址</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="指针数组保存二维数组地址"><a href="#指针数组保存二维数组地址" class="headerlink" title="指针数组保存二维数组地址"></a>指针数组保存二维数组地址</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>行地址：arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">int</span> <span class="token operator">*</span>parr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="指针数组保存字符串"><a href="#指针数组保存字符串" class="headerlink" title="指针数组保存字符串"></a>指针数组保存字符串</h4><h5 id="字符串仍然在常量区中，所以只能读取不能修改字符串"><a href="#字符串仍然在常量区中，所以只能读取不能修改字符串" class="headerlink" title="字符串仍然在常量区中，所以只能读取不能修改字符串"></a>字符串仍然在常量区中，所以只能读取不能修改字符串</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>x <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>z <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pstr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pstr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>此时pstr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>表示 <span class="token char">'h'</span> 字符的地址，pstr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>表示 <span class="token char">'w'</span>字符的地址，pstr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>表示 <span class="token char">'1'</span> 字符的起始地址pstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span>表示 <span class="token char">'l'</span> 字符的起始地址取其内容为：<span class="token operator">*</span><span class="token punctuation">(</span>pstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> pstr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'l'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="二维数组保存字符串"><a href="#二维数组保存字符串" class="headerlink" title="二维数组保存字符串"></a>二维数组保存字符串</h4><h5 id="二维数组保存字符串可以修改，此时在栈区保存字符串的副本"><a href="#二维数组保存字符串可以修改，此时在栈区保存字符串的副本" class="headerlink" title="二维数组保存字符串可以修改，此时在栈区保存字符串的副本"></a>二维数组保存字符串可以修改，此时在栈区保存字符串的副本</h5><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">表示可以操纵整个数组空间的指针（指向数组的指针）</code></pre></div></figure><h3 id="格式：-1"><a href="#格式：-1" class="headerlink" title="格式："></a>格式：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">数据类型 (*指针变量名)[数组元素个数]；该指针的数据类型，数据类型 (*) [数组元素个数]该指针操作内存大小：sizeof(数据类型)*元素个数</code></pre></div></figure><h4 id="一维数组："><a href="#一维数组：" class="headerlink" title="一维数组："></a>一维数组：</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 抽象成 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 类型的 a变量<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> INT<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> a <span class="token operator">==</span> INT <span class="token function">a</span><span class="token punctuation">(</span>INT型变量<span class="token punctuation">)</span>INT <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">(</span>INT型指针<span class="token punctuation">)</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a（最终结果）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="二维数组："><a href="#二维数组：" class="headerlink" title="二维数组："></a>二维数组：</h4><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>将一行看成一个元素，新类型<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> INTINT a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>INT<span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实现itoa和atoi函数</title>
      <link href="/2022/09/07/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0itoa%E5%92%8Catoi%E5%87%BD%E6%95%B0/"/>
      <url>/2022/09/07/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0itoa%E5%92%8Catoi%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="简单实现itoa和atoi函数"><a href="#简单实现itoa和atoi函数" class="headerlink" title="简单实现itoa和atoi函数"></a>简单实现itoa和atoi函数</h1><h2 id="itoa功能：输入一个字符串转换为数字"><a href="#itoa功能：输入一个字符串转换为数字" class="headerlink" title="itoa功能：输入一个字符串转换为数字"></a>itoa功能：输入一个字符串转换为数字</h2><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入 &quot;13524&quot;，输出数字 13524</code></pre></div></figure><h3 id="itoa主要实现思想："><a href="#itoa主要实现思想：" class="headerlink" title="itoa主要实现思想："></a>itoa主要实现思想：</h3><h4 id="从输入框获取一个数字字符串，可以为-‘空格’、’-’、’-‘开始，然后遍历该字符数组，得到其为N位数，如果第一个字符为-‘-‘-的话则先从负号后面的第一个字符开始操作并且做标记，如果为-‘-’-或者-‘空格’-的话则直接从第一个数开始操作，用当前下标的字符加上减去字符-‘0’-或者用其对-‘0’-取余来转换位对应的数字并存到另一个int数组里，下标从0开始顺序存储，直到当前下标为-‘-0’-结束。然后定义一个变量用来存储该数组最后的和值。"><a href="#从输入框获取一个数字字符串，可以为-‘空格’、’-’、’-‘开始，然后遍历该字符数组，得到其为N位数，如果第一个字符为-‘-‘-的话则先从负号后面的第一个字符开始操作并且做标记，如果为-‘-’-或者-‘空格’-的话则直接从第一个数开始操作，用当前下标的字符加上减去字符-‘0’-或者用其对-‘0’-取余来转换位对应的数字并存到另一个int数组里，下标从0开始顺序存储，直到当前下标为-‘-0’-结束。然后定义一个变量用来存储该数组最后的和值。" class="headerlink" title="从输入框获取一个数字字符串，可以为 ‘空格’、’+’、’-‘开始，然后遍历该字符数组，得到其为N位数，如果第一个字符为 ‘-‘ 的话则先从负号后面的第一个字符开始操作并且做标记，如果为 ‘+’ 或者 ‘空格’ 的话则直接从第一个数开始操作，用当前下标的字符加上减去字符 ‘0’ 或者用其对 ‘0’ 取余来转换位对应的数字并存到另一个int数组里，下标从0开始顺序存储，直到当前下标为 ‘\0’ 结束。然后定义一个变量用来存储该数组最后的和值。"></a>从输入框获取一个数字字符串，可以为 ‘空格’、’+’、’-‘开始，然后遍历该字符数组，得到其为N位数，如果第一个字符为 ‘-‘ 的话则先从负号后面的第一个字符开始操作并且做标记，如果为 ‘+’ 或者 ‘空格’ 的话则直接从第一个数开始操作，用当前下标的字符加上减去字符 ‘0’ 或者用其对 ‘0’ 取余来转换位对应的数字并存到另一个int数组里，下标从0开始顺序存储，直到当前下标为 ‘\0’ 结束。然后定义一个变量用来存储该数组最后的和值。</h4><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">👀：    如果输入的字符串为 13524    则转换后的int数组为：    &#123;1, 3, 5, 2, 4&#125;    每个数组元素为对应的数字    然而最后要得到的数字为：13524    所以需要一种方法来求出其对应的值    13524 = 1*10^4 + 3*10^3 + 5*10^2 + 2*10^1 + 2*10^0</code></pre></div></figure><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 实现atoi</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            flag<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'0'</span><span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'0'</span><span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">48</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sum <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="atoi功能：输入一个数字转换为字符串"><a href="#atoi功能：输入一个数字转换为字符串" class="headerlink" title="atoi功能：输入一个数字转换为字符串"></a>atoi功能：输入一个数字转换为字符串</h2><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">输入数字 -1234 转换为字符串 &quot;-1234&quot;</code></pre></div></figure><h3 id="atoi主要实现思想："><a href="#atoi主要实现思想：" class="headerlink" title="atoi主要实现思想："></a>atoi主要实现思想：</h3><h4 id="从输入框获取一个数字，然后判断该数字为正数还是负数，为负则做标记，然后用该数字对10取余数再加上-‘0’-将其最后一位数转换为字符，然后该数字除上10，来获取未被转换的数字，存到字符数组中，然后循环这个过程直到该数字为0，则代表该数字已经被转换完毕，此时用之前的标记来判断该数为正or负，如果为负，则给其末尾添加一个-‘-‘-如果不为负则什么都不用做，接着头尾交换字符数组中的元素"><a href="#从输入框获取一个数字，然后判断该数字为正数还是负数，为负则做标记，然后用该数字对10取余数再加上-‘0’-将其最后一位数转换为字符，然后该数字除上10，来获取未被转换的数字，存到字符数组中，然后循环这个过程直到该数字为0，则代表该数字已经被转换完毕，此时用之前的标记来判断该数为正or负，如果为负，则给其末尾添加一个-‘-‘-如果不为负则什么都不用做，接着头尾交换字符数组中的元素" class="headerlink" title="从输入框获取一个数字，然后判断该数字为正数还是负数，为负则做标记，然后用该数字对10取余数再加上 ‘0’ 将其最后一位数转换为字符，然后该数字除上10，来获取未被转换的数字，存到字符数组中，然后循环这个过程直到该数字为0，则代表该数字已经被转换完毕，此时用之前的标记来判断该数为正or负，如果为负，则给其末尾添加一个 ‘-‘ 如果不为负则什么都不用做，接着头尾交换字符数组中的元素"></a>从输入框获取一个数字，然后判断该数字为正数还是负数，为负则做标记，然后用该数字对10取余数再加上 ‘0’ 将其最后一位数转换为字符，然后该数字除上10，来获取未被转换的数字，存到字符数组中，然后循环这个过程直到该数字为0，则代表该数字已经被转换完毕，此时用之前的标记来判断该数为正or负，如果为负，则给其末尾添加一个 ‘-‘ 如果不为负则什么都不用做，接着头尾交换字符数组中的元素</h4><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">👀：    当一个数字转换为字符之后是将该数字从    最后一位数字依次顺序存入一个字符数组    此时该字符数组中的值应该为:    &#123;&#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;,&#39;-&#39;&#125;    则需要头尾交换对应的元素,然后头元素的    后一个元素与尾元素的上一个元素交换,直    到前后交换完毕,最后输出该字符数组,即    该数字所转换的字符串</code></pre></div></figure><p>###代码实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 实现itoa</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        num <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// printf("%d\n",strlen(str));</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        k<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// printf("%d %d\n", strlen(str),i);</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 自定义函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单实现常用的str函数</title>
      <link href="/2022/09/07/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84str%E5%87%BD%E6%95%B0/"/>
      <url>/2022/09/07/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E7%9A%84str%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="简单实现常用的str函数"><a href="#简单实现常用的str函数" class="headerlink" title="简单实现常用的str函数"></a>简单实现常用的str函数</h1><h2 id="1-sizeof-与-strlen的区别"><a href="#1-sizeof-与-strlen的区别" class="headerlink" title="1.sizeof 与 strlen的区别"></a>1.sizeof 与 strlen的区别</h2><p>在计算字符串这块sizeof计算的是该字符串所占的内存空间大小，因为字符串以’\0’结尾，</p><p>所以sizeof计算字符串的时候也会把’\0’所占的字节计算进去。</p><p>列：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">char str1[] = &quot;hello world&quot;;sizeof(str1)结果为：12</code></pre></div></figure><p>strlen计算的是字符串的长度，因为字符串以’&#x2F;0’结尾，所以在使用strlen函数计算字符串长度的时候碰见’\0’计算就结束了。</p><p>列：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">char str2[] = &quot;\0\0hello\0&quot;;strlen(str2) 结果为：0</code></pre></div></figure><hr><h2 id="2-在不调用库函数的情况下，实现字符串函数"><a href="#2-在不调用库函数的情况下，实现字符串函数" class="headerlink" title="2.在不调用库函数的情况下，实现字符串函数"></a>2.在不调用库函数的情况下，实现字符串函数</h2><h3 id="2-1-mystrlen"><a href="#2-1-mystrlen" class="headerlink" title="2.1 mystrlen"></a>2.1 mystrlen</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hello world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-mystrcat"><a href="#2-2-mystrcat" class="headerlink" title="2.2 mystrcat"></a>2.2 mystrcat</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 计算str1的字符串长度</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>           str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-3-mystrcpy"><a href="#2-3-mystrcpy" class="headerlink" title="2.3 mystrcpy"></a>2.3 mystrcpy</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>         <span class="token punctuation">&#123;</span>            str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-4-mystrcmp"><a href="#2-4-mystrcmp" class="headerlink" title="2.4 mystrcmp"></a>2.4 mystrcmp</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-5-mystrncat"><a href="#2-5-mystrncat" class="headerlink" title="2.5 mystrncat"></a>2.5 mystrncat</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要拼接的个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//str1[i] = str2[i];</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-6-mystrncmp"><a href="#2-6-mystrncmp" class="headerlink" title="2.6 mystrncmp"></a>2.6 mystrncmp</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要比较的个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 自定义函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不适用库函数实现strstr</title>
      <link href="/2022/09/05/%E5%AE%9E%E7%8E%B0strstr/"/>
      <url>/2022/09/05/%E5%AE%9E%E7%8E%B0strstr/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="不使用库函数实现strstr"><a href="#不使用库函数实现strstr" class="headerlink" title="不使用库函数实现strstr"></a>不使用库函数实现strstr</h1><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><p> 先准备两个字符串str1和子字符串str2，然后从控制台获取字符串，<strong>并计算子字符串的长度iLen</strong>，然后while循环遍历str1字符串，终止条件为碰见’\0’时结束，在循环中拿子字符串第一个元素的值与str1的每一个元素做比较，<strong>如果相等则判断该元素下标加一是否等于该字符串长度iLen</strong>如果相等则表示子字符串已经判断完成直接输出值，如果不相等则str2的第二个元素与str1当前元素的下一个元素作比较，直到遍历完str2的元素然后输出结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main() &#123;        char str1[32] &#x3D; &quot;&quot;;    char str2[32] &#x3D; &quot;&quot;;    gets(str1);    gets(str2);    int i &#x3D; 0;    int iLen &#x3D; strlen(str2);    while (str1[i] !&#x3D; &#39;\0&#39;)    &#123;        if(str1[i] !&#x3D; str2[0]) &#123;            i++;            continue;        &#125;        int j &#x3D; 0;        while (str1[i+j] &#x3D;&#x3D; str2[j])        &#123;            if (j + 1 &#x3D;&#x3D; iLen)            &#123;                printf(&quot;%s\n&quot;,&amp;str1[i]);                return 0;            &#125;            j++;        &#125;        i++;        &#125;    printf(&quot;null&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 自定义函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/05/hello-world/"/>
      <url>/2022/09/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
